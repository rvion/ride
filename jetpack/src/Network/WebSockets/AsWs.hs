module Network.WebSockets.AsWs where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.WebSockets as I

-- ws_runClient :: forall a. String -> Int -> String -> ClientApp a -> IO a
ws_runClient = I.runClient

-- ws_runClientWith :: forall a. String -> Int -> String -> ConnectionOptions -> Headers -> ClientApp a -> IO a
ws_runClientWith = I.runClientWith

-- ws_runClientWithSocket :: forall a. Socket -> String -> String -> ConnectionOptions -> Headers -> ClientApp a -> IO a
ws_runClientWithSocket = I.runClientWithSocket

-- ws_runClientWithStream :: forall a. Stream -> String -> String -> ConnectionOptions -> Headers -> ClientApp a -> IO a
ws_runClientWithStream = I.runClientWithStream

-- ws_acceptRequest :: PendingConnection -> IO Connection
ws_acceptRequest = I.acceptRequest

-- ws_acceptRequestWith :: PendingConnection -> AcceptRequest -> IO Connection
ws_acceptRequestWith = I.acceptRequestWith

-- ws_defaultConnectionOptions :: ConnectionOptions
ws_defaultConnectionOptions = I.defaultConnectionOptions

-- ws_forkPingThread :: Connection -> Int -> IO ()
ws_forkPingThread = I.forkPingThread

-- ws_receive :: Connection -> IO Message
ws_receive = I.receive

-- ws_receiveData :: forall a. WebSocketsData a => Connection -> IO a
ws_receiveData = I.receiveData

-- ws_receiveDataMessage :: Connection -> IO DataMessage
ws_receiveDataMessage = I.receiveDataMessage

-- ws_rejectRequest :: PendingConnection -> ByteString -> IO ()
ws_rejectRequest = I.rejectRequest

-- ws_send :: Connection -> Message -> IO ()
ws_send = I.send

-- ws_sendBinaryData :: forall a. WebSocketsData a => Connection -> a -> IO ()
ws_sendBinaryData = I.sendBinaryData

-- ws_sendClose :: forall a. WebSocketsData a => Connection -> a -> IO ()
ws_sendClose = I.sendClose

-- ws_sendDataMessage :: Connection -> DataMessage -> IO ()
ws_sendDataMessage = I.sendDataMessage

-- ws_sendPing :: forall a. WebSocketsData a => Connection -> a -> IO ()
ws_sendPing = I.sendPing

-- ws_sendTextData :: forall a. WebSocketsData a => Connection -> a -> IO ()
ws_sendTextData = I.sendTextData

-- ws_getRequestSubprotocols :: RequestHead -> [ByteString]
ws_getRequestSubprotocols = I.getRequestSubprotocols

-- ws_makeListenSocket :: String -> Int -> IO Socket
ws_makeListenSocket = I.makeListenSocket

-- ws_makePendingConnection :: Socket -> ConnectionOptions -> IO PendingConnection
ws_makePendingConnection = I.makePendingConnection

-- ws_makePendingConnectionFromStream :: Stream -> ConnectionOptions -> IO PendingConnection
ws_makePendingConnectionFromStream = I.makePendingConnectionFromStream

-- ws_runServer :: String -> Int -> ServerApp -> IO ()
ws_runServer = I.runServer

-- ws_runServerWith :: String -> Int -> ConnectionOptions -> ServerApp -> IO ()
ws_runServerWith = I.runServerWith

type WsClientApp a = I.ClientApp a
type WsAcceptRequest  = I.AcceptRequest
-- ws_acceptSubprotocol :: AcceptRequest -> Maybe ByteString
ws_acceptSubprotocol = I.acceptSubprotocol

type WsConnection  = I.Connection
type WsConnectionOptions  = I.ConnectionOptions
-- ws_connectionOnPong :: ConnectionOptions -> IO ()
ws_connectionOnPong = I.connectionOnPong

type WsPendingConnection  = I.PendingConnection
-- ws_pendingRequest :: PendingConnection -> RequestHead
ws_pendingRequest = I.pendingRequest

type WsHandshakeException  = I.HandshakeException
type WsHeaders  = I.Headers
type WsRequest  = I.Request
type WsRequestHead  = I.RequestHead
-- ws_requestHeaders :: RequestHead -> Headers
ws_requestHeaders = I.requestHeaders

-- ws_requestPath :: RequestHead -> ByteString
ws_requestPath = I.requestPath

-- ws_requestSecure :: RequestHead -> Bool
ws_requestSecure = I.requestSecure

type WsResponse  = I.Response
type WsResponseHead  = I.ResponseHead
-- ws_responseCode :: ResponseHead -> Int
ws_responseCode = I.responseCode

-- ws_responseHeaders :: ResponseHead -> Headers
ws_responseHeaders = I.responseHeaders

-- ws_responseMessage :: ResponseHead -> ByteString
ws_responseMessage = I.responseMessage

type WsServerApp  = I.ServerApp
type WsConnectionException  = I.ConnectionException
type WsControlMessage  = I.ControlMessage
type WsDataMessage  = I.DataMessage
type WsMessage  = I.Message
-- ws_fromLazyByteString :: ByteString -> a
ws_fromLazyByteString = I.fromLazyByteString

-- ws_toLazyByteString :: a -> ByteString
ws_toLazyByteString = I.toLazyByteString

