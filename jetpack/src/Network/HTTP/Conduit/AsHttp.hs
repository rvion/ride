module Network.HTTP.Conduit.AsHttp
  ( module Network.HTTP.Conduit.AsHttp
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.HTTP.Conduit as I


-- http_http :: forall (m :: * -> *). MonadResource m => Request -> Manager -> m (Response (ResumableSource m ByteString))
http_http = I.http

-- http_httpLbs :: forall (m :: * -> *). MonadIO m => Request -> Manager -> m (Response ByteString)
http_httpLbs = I.httpLbs

-- http_lbsResponse :: forall (m :: * -> *). Monad m => Response (ResumableSource m ByteString) -> m (Response ByteString)
http_lbsResponse = I.lbsResponse

-- http_requestBodySource :: Int64 -> Source (ResourceT IO) ByteString -> RequestBody
http_requestBodySource = I.requestBodySource

-- http_requestBodySourceChunked :: Source (ResourceT IO) ByteString -> RequestBody
http_requestBodySourceChunked = I.requestBodySourceChunked

-- http_requestBodySourceChunkedIO :: Source IO ByteString -> RequestBody
http_requestBodySourceChunkedIO = I.requestBodySourceChunkedIO

-- http_requestBodySourceIO :: Int64 -> Source IO ByteString -> RequestBody
http_requestBodySourceIO = I.requestBodySourceIO

-- http_simpleHttp :: forall (m :: * -> *). MonadIO m => String -> m ByteString
http_simpleHttp = I.simpleHttp

-- http_mkManagerSettings :: TLSSettings -> Maybe SockSettings -> ManagerSettings
http_mkManagerSettings = I.mkManagerSettings

-- http_tlsManagerSettings :: ManagerSettings
http_tlsManagerSettings = I.tlsManagerSettings

-- http_createCookieJar :: [Cookie] -> CookieJar
http_createCookieJar = I.createCookieJar

-- http_destroyCookieJar :: CookieJar -> [Cookie]
http_destroyCookieJar = I.destroyCookieJar

-- http_closeManager :: Manager -> IO ()
http_closeManager = I.closeManager

-- http_newManager :: ManagerSettings -> IO Manager
http_newManager = I.newManager

-- http_addProxy :: ByteString -> Int -> Request -> Request
http_addProxy = I.addProxy

-- http_alwaysDecompress :: ByteString -> Bool
http_alwaysDecompress = I.alwaysDecompress

-- http_applyBasicAuth :: ByteString -> ByteString -> Request -> Request
http_applyBasicAuth = I.applyBasicAuth

-- http_browserDecompress :: ByteString -> Bool
http_browserDecompress = I.browserDecompress

-- http_parseUrl :: forall (m :: * -> *). MonadThrow m => String -> m Request
http_parseUrl = I.parseUrl

-- http_setQueryString :: [(ByteString, Maybe ByteString)] -> Request -> Request
http_setQueryString = I.setQueryString

-- http_urlEncodedBody :: [(ByteString, ByteString)] -> Request -> Request
http_urlEncodedBody = I.urlEncodedBody

-- http_getRedirectedRequest :: Request -> ResponseHeaders -> CookieJar -> Int -> Maybe Request
http_getRedirectedRequest = I.getRedirectedRequest

type HttpCookie  = I.Cookie

-- constructor :: ByteString -> ByteString -> UTCTime -> ByteString -> ByteString -> UTCTime -> UTCTime -> Bool -> Bool -> Bool -> Bool -> Cookie
http_mk'Cookie =  I.Cookie
pattern HttpCookie a b c d e f g h i j k <-  I.Cookie a b c d e f g h i j k

type HttpCookieJar  = I.CookieJar

type HttpHttpException  = I.HttpException

-- constructor :: Status -> ResponseHeaders -> CookieJar -> StatusCodeException
http_mk'StatusCodeException =  I.StatusCodeException
pattern HttpStatusCodeException a b c <-  I.StatusCodeException a b c

-- constructor :: String -> String -> InvalidUrlException
http_mk'InvalidUrlException =  I.InvalidUrlException
pattern HttpInvalidUrlException a b <-  I.InvalidUrlException a b

-- constructor :: [Response ByteString] -> TooManyRedirects
http_mk'TooManyRedirects =  I.TooManyRedirects
pattern HttpTooManyRedirects a <-  I.TooManyRedirects a

-- constructor :: Response ByteString -> UnparseableRedirect
http_mk'UnparseableRedirect =  I.UnparseableRedirect
pattern HttpUnparseableRedirect a <-  I.UnparseableRedirect a

-- constructor :: TooManyRetries
http_mk'TooManyRetries =  I.TooManyRetries
pattern HttpTooManyRetries  <-  I.TooManyRetries 

-- constructor :: String -> HttpParserException
http_mk'HttpParserException =  I.HttpParserException
pattern HttpHttpParserException a <-  I.HttpParserException a

-- constructor :: HandshakeFailed
http_mk'HandshakeFailed =  I.HandshakeFailed
pattern HttpHandshakeFailed  <-  I.HandshakeFailed 

-- constructor :: OverlongHeaders
http_mk'OverlongHeaders =  I.OverlongHeaders
pattern HttpOverlongHeaders  <-  I.OverlongHeaders 

-- constructor :: ResponseTimeout
http_mk'ResponseTimeout =  I.ResponseTimeout
pattern HttpResponseTimeout  <-  I.ResponseTimeout 

-- constructor :: String -> Int -> FailedConnectionException
http_mk'FailedConnectionException =  I.FailedConnectionException
pattern HttpFailedConnectionException a b <-  I.FailedConnectionException a b

-- constructor :: String -> Int -> Bool -> SomeException -> FailedConnectionException2
http_mk'FailedConnectionException2 =  I.FailedConnectionException2
pattern HttpFailedConnectionException2 a b c d <-  I.FailedConnectionException2 a b c d

-- constructor :: ExpectedBlankAfter100Continue
http_mk'ExpectedBlankAfter100Continue =  I.ExpectedBlankAfter100Continue
pattern HttpExpectedBlankAfter100Continue  <-  I.ExpectedBlankAfter100Continue 

-- constructor :: ByteString -> InvalidStatusLine
http_mk'InvalidStatusLine =  I.InvalidStatusLine
pattern HttpInvalidStatusLine a <-  I.InvalidStatusLine a

-- constructor :: ByteString -> InvalidHeader
http_mk'InvalidHeader =  I.InvalidHeader
pattern HttpInvalidHeader a <-  I.InvalidHeader a

-- constructor :: IOException -> InternalIOException
http_mk'InternalIOException =  I.InternalIOException
pattern HttpInternalIOException a <-  I.InternalIOException a

-- constructor :: ByteString -> Int -> Either ByteString HttpException -> ProxyConnectException
http_mk'ProxyConnectException =  I.ProxyConnectException
pattern HttpProxyConnectException a b c <-  I.ProxyConnectException a b c

-- constructor :: NoResponseDataReceived
http_mk'NoResponseDataReceived =  I.NoResponseDataReceived
pattern HttpNoResponseDataReceived  <-  I.NoResponseDataReceived 

-- constructor :: SomeException -> TlsException
http_mk'TlsException =  I.TlsException
pattern HttpTlsException a <-  I.TlsException a

-- constructor :: TlsNotSupported
http_mk'TlsNotSupported =  I.TlsNotSupported
pattern HttpTlsNotSupported  <-  I.TlsNotSupported 

-- constructor :: Word64 -> Word64 -> ResponseBodyTooShort
http_mk'ResponseBodyTooShort =  I.ResponseBodyTooShort
pattern HttpResponseBodyTooShort a b <-  I.ResponseBodyTooShort a b

-- constructor :: InvalidChunkHeaders
http_mk'InvalidChunkHeaders =  I.InvalidChunkHeaders
pattern HttpInvalidChunkHeaders  <-  I.InvalidChunkHeaders 

-- constructor :: IncompleteHeaders
http_mk'IncompleteHeaders =  I.IncompleteHeaders
pattern HttpIncompleteHeaders  <-  I.IncompleteHeaders 

-- constructor :: ByteString -> InvalidDestinationHost
http_mk'InvalidDestinationHost =  I.InvalidDestinationHost
pattern HttpInvalidDestinationHost a <-  I.InvalidDestinationHost a

-- constructor :: ZlibException -> HttpZlibException
http_mk'HttpZlibException =  I.HttpZlibException
pattern HttpHttpZlibException a <-  I.HttpZlibException a

-- constructor :: Text -> Text -> InvalidProxyEnvironmentVariable
http_mk'InvalidProxyEnvironmentVariable =  I.InvalidProxyEnvironmentVariable
pattern HttpInvalidProxyEnvironmentVariable a b <-  I.InvalidProxyEnvironmentVariable a b

-- constructor :: ResponseLengthAndChunkingBothUsed
http_mk'ResponseLengthAndChunkingBothUsed =  I.ResponseLengthAndChunkingBothUsed
pattern HttpResponseLengthAndChunkingBothUsed  <-  I.ResponseLengthAndChunkingBothUsed 

-- constructor :: SomeException -> ByteString -> Int -> TlsExceptionHostPort
http_mk'TlsExceptionHostPort =  I.TlsExceptionHostPort
pattern HttpTlsExceptionHostPort a b c <-  I.TlsExceptionHostPort a b c

type HttpManager  = I.Manager

type HttpManagerSettings  = I.ManagerSettings

type HttpProxy  = I.Proxy

-- constructor :: ByteString -> Int -> Proxy
http_mk'Proxy =  I.Proxy
pattern HttpProxy a b <-  I.Proxy a b

type HttpRequest  = I.Request

type HttpRequestBody  = I.RequestBody

-- constructor :: ByteString -> RequestBodyLBS
http_mk'RequestBodyLBS =  I.RequestBodyLBS
pattern HttpRequestBodyLBS a <-  I.RequestBodyLBS a

-- constructor :: ByteString -> RequestBodyBS
http_mk'RequestBodyBS =  I.RequestBodyBS
pattern HttpRequestBodyBS a <-  I.RequestBodyBS a

-- constructor :: Int64 -> Builder -> RequestBodyBuilder
http_mk'RequestBodyBuilder =  I.RequestBodyBuilder
pattern HttpRequestBodyBuilder a b <-  I.RequestBodyBuilder a b

-- constructor :: Int64 -> GivesPopper () -> RequestBodyStream
http_mk'RequestBodyStream =  I.RequestBodyStream
pattern HttpRequestBodyStream a b <-  I.RequestBodyStream a b

-- constructor :: GivesPopper () -> RequestBodyStreamChunked
http_mk'RequestBodyStreamChunked =  I.RequestBodyStreamChunked
pattern HttpRequestBodyStreamChunked a <-  I.RequestBodyStreamChunked a

type HttpResponse a = I.Response a
