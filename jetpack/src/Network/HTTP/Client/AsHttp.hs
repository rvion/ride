module Network.HTTP.Client.AsHttp
  ( -- unqualified class re-export
  I.HasHttpManager(I.getHttpManager)
  , module Network.HTTP.Client.AsHttp
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.HTTP.Client as I


-- http_managerSetInsecureProxy :: ProxyOverride -> ManagerSettings -> ManagerSettings
http_managerSetInsecureProxy = I.managerSetInsecureProxy

-- http_managerSetProxy :: ProxyOverride -> ManagerSettings -> ManagerSettings
http_managerSetProxy = I.managerSetProxy

-- http_managerSetSecureProxy :: ProxyOverride -> ManagerSettings -> ManagerSettings
http_managerSetSecureProxy = I.managerSetSecureProxy

-- http_responseOpenHistory :: Request -> Manager -> IO (HistoriedResponse BodyReader)
http_responseOpenHistory = I.responseOpenHistory

-- http_withResponseHistory :: forall a. Request -> Manager -> (HistoriedResponse BodyReader -> IO a) -> IO a
http_withResponseHistory = I.withResponseHistory

-- http_brConsume :: BodyReader -> IO [ByteString]
http_brConsume = I.brConsume

-- http_brRead :: BodyReader -> IO ByteString
http_brRead = I.brRead

-- http_brReadSome :: BodyReader -> Int -> IO ByteString
http_brReadSome = I.brReadSome

-- http_computeCookieString :: Request -> CookieJar -> UTCTime -> Bool -> (ByteString, CookieJar)
http_computeCookieString = I.computeCookieString

-- http_createCookieJar :: [Cookie] -> CookieJar
http_createCookieJar = I.createCookieJar

-- http_defaultPath :: Request -> ByteString
http_defaultPath = I.defaultPath

-- http_destroyCookieJar :: CookieJar -> [Cookie]
http_destroyCookieJar = I.destroyCookieJar

-- http_domainMatches :: ByteString -> ByteString -> Bool
http_domainMatches = I.domainMatches

-- http_evictExpiredCookies :: CookieJar -> UTCTime -> CookieJar
http_evictExpiredCookies = I.evictExpiredCookies

-- http_generateCookie :: SetCookie -> Request -> UTCTime -> Bool -> Maybe Cookie
http_generateCookie = I.generateCookie

-- http_insertCheckedCookie :: Cookie -> CookieJar -> Bool -> CookieJar
http_insertCheckedCookie = I.insertCheckedCookie

-- http_insertCookiesIntoRequest :: Request -> CookieJar -> UTCTime -> (Request, CookieJar)
http_insertCookiesIntoRequest = I.insertCookiesIntoRequest

-- http_isIpAddress :: ByteString -> Bool
http_isIpAddress = I.isIpAddress

-- http_pathMatches :: ByteString -> ByteString -> Bool
http_pathMatches = I.pathMatches

-- http_receiveSetCookie :: SetCookie -> Request -> UTCTime -> Bool -> CookieJar -> CookieJar
http_receiveSetCookie = I.receiveSetCookie

-- http_removeExistingCookieFromCookieJar :: Cookie -> CookieJar -> (Maybe Cookie, CookieJar)
http_removeExistingCookieFromCookieJar = I.removeExistingCookieFromCookieJar

-- http_updateCookieJar :: forall a. Response a -> Request -> UTCTime -> CookieJar -> (CookieJar, Response a)
http_updateCookieJar = I.updateCookieJar

-- http_httpLbs :: Request -> Manager -> IO (Response ByteString)
http_httpLbs = I.httpLbs

-- http_httpNoBody :: Request -> Manager -> IO (Response ())
http_httpNoBody = I.httpNoBody

-- http_responseClose :: forall a. Response a -> IO ()
http_responseClose = I.responseClose

-- http_responseOpen :: Request -> Manager -> IO (Response BodyReader)
http_responseOpen = I.responseOpen

-- http_withResponse :: forall a. Request -> Manager -> (Response BodyReader -> IO a) -> IO a
http_withResponse = I.withResponse

-- http_closeManager :: Manager -> IO ()
http_closeManager = I.closeManager

-- http_defaultManagerSettings :: ManagerSettings
http_defaultManagerSettings = I.defaultManagerSettings

-- http_defaultProxy :: ProxyOverride
http_defaultProxy = I.defaultProxy

-- http_newManager :: ManagerSettings -> IO Manager
http_newManager = I.newManager

-- http_noProxy :: ProxyOverride
http_noProxy = I.noProxy

-- http_proxyEnvironment :: Maybe Proxy -> ProxyOverride
http_proxyEnvironment = I.proxyEnvironment

-- http_proxyEnvironmentNamed :: Text -> Maybe Proxy -> ProxyOverride
http_proxyEnvironmentNamed = I.proxyEnvironmentNamed

-- http_proxyFromRequest :: ProxyOverride
http_proxyFromRequest = I.proxyFromRequest

-- http_rawConnectionModifySocket :: (Socket -> IO ()) -> IO (Maybe HostAddress -> String -> Int -> IO Connection)
http_rawConnectionModifySocket = I.rawConnectionModifySocket

-- http_useProxy :: Proxy -> ProxyOverride
http_useProxy = I.useProxy

-- http_withManager :: forall a. ManagerSettings -> (Manager -> IO a) -> IO a
http_withManager = I.withManager

-- http_applyBasicAuth :: ByteString -> ByteString -> Request -> Request
http_applyBasicAuth = I.applyBasicAuth

-- http_applyBasicProxyAuth :: ByteString -> ByteString -> Request -> Request
http_applyBasicProxyAuth = I.applyBasicProxyAuth

-- http_getUri :: Request -> URI
http_getUri = I.getUri

-- http_observedStreamFile :: (StreamFileStatus -> IO ()) -> FilePath -> IO RequestBody
http_observedStreamFile = I.observedStreamFile

-- http_parseUrl :: forall (m :: * -> *). MonadThrow m => String -> m Request
http_parseUrl = I.parseUrl

-- http_setQueryString :: [(ByteString, Maybe ByteString)] -> Request -> Request
http_setQueryString = I.setQueryString

-- http_streamFile :: FilePath -> IO RequestBody
http_streamFile = I.streamFile

-- http_urlEncodedBody :: [(ByteString, ByteString)] -> Request -> Request
http_urlEncodedBody = I.urlEncodedBody

type HttpHistoriedResponse a = I.HistoriedResponse a
get_http_hrRedirects o = I.hrRedirects o
set_http_hrRedirects x o = o { I.hrRedirects = x}
get_http_hrFinalRequest o = I.hrFinalRequest o
set_http_hrFinalRequest x o = o { I.hrFinalRequest = x}
get_http_hrFinalResponse o = I.hrFinalResponse o
set_http_hrFinalResponse x o = o { I.hrFinalResponse = x}

type HttpBodyReader  = I.BodyReader

type HttpCookie  = I.Cookie
get_http_cookie_name o = I.cookie_name o
set_http_cookie_name x o = o { I.cookie_name = x}
get_http_cookie_value o = I.cookie_value o
set_http_cookie_value x o = o { I.cookie_value = x}
get_http_cookie_expiry_time o = I.cookie_expiry_time o
set_http_cookie_expiry_time x o = o { I.cookie_expiry_time = x}
get_http_cookie_domain o = I.cookie_domain o
set_http_cookie_domain x o = o { I.cookie_domain = x}
get_http_cookie_path o = I.cookie_path o
set_http_cookie_path x o = o { I.cookie_path = x}
get_http_cookie_creation_time o = I.cookie_creation_time o
set_http_cookie_creation_time x o = o { I.cookie_creation_time = x}
get_http_cookie_last_access_time o = I.cookie_last_access_time o
set_http_cookie_last_access_time x o = o { I.cookie_last_access_time = x}
get_http_cookie_persistent o = I.cookie_persistent o
set_http_cookie_persistent x o = o { I.cookie_persistent = x}
get_http_cookie_host_only o = I.cookie_host_only o
set_http_cookie_host_only x o = o { I.cookie_host_only = x}
get_http_cookie_secure_only o = I.cookie_secure_only o
set_http_cookie_secure_only x o = o { I.cookie_secure_only = x}
get_http_cookie_http_only o = I.cookie_http_only o
set_http_cookie_http_only x o = o { I.cookie_http_only = x}

-- constructor :: ByteString -> ByteString -> UTCTime -> ByteString -> ByteString -> UTCTime -> UTCTime -> Bool -> Bool -> Bool -> Bool -> Cookie
http_mk'Cookie =  I.Cookie
pattern HttpCookie a b c d e f g h i j k <-  I.Cookie a b c d e f g h i j k

type HttpCookieJar  = I.CookieJar

type HttpGivesPopper a = I.GivesPopper a

type HttpHttpException  = I.HttpException

-- constructor :: Status -> ResponseHeaders -> CookieJar -> StatusCodeException
http_mk'StatusCodeException =  I.StatusCodeException
pattern HttpStatusCodeException a b c <-  I.StatusCodeException a b c

-- constructor :: String -> String -> InvalidUrlException
http_mk'InvalidUrlException =  I.InvalidUrlException
pattern HttpInvalidUrlException a b <-  I.InvalidUrlException a b

-- constructor :: [Response ByteString] -> TooManyRedirects
http_mk'TooManyRedirects =  I.TooManyRedirects
pattern HttpTooManyRedirects a <-  I.TooManyRedirects a

-- constructor :: Response ByteString -> UnparseableRedirect
http_mk'UnparseableRedirect =  I.UnparseableRedirect
pattern HttpUnparseableRedirect a <-  I.UnparseableRedirect a

-- constructor :: TooManyRetries
http_mk'TooManyRetries =  I.TooManyRetries
pattern HttpTooManyRetries  <-  I.TooManyRetries

-- constructor :: String -> HttpParserException
http_mk'HttpParserException =  I.HttpParserException
pattern HttpHttpParserException a <-  I.HttpParserException a

-- constructor :: HandshakeFailed
http_mk'HandshakeFailed =  I.HandshakeFailed
pattern HttpHandshakeFailed  <-  I.HandshakeFailed

-- constructor :: OverlongHeaders
http_mk'OverlongHeaders =  I.OverlongHeaders
pattern HttpOverlongHeaders  <-  I.OverlongHeaders

-- constructor :: ResponseTimeout
http_mk'ResponseTimeout =  I.ResponseTimeout
pattern HttpResponseTimeout  <-  I.ResponseTimeout

-- constructor :: String -> Int -> FailedConnectionException
http_mk'FailedConnectionException =  I.FailedConnectionException
pattern HttpFailedConnectionException a b <-  I.FailedConnectionException a b

-- constructor :: String -> Int -> Bool -> SomeException -> FailedConnectionException2
http_mk'FailedConnectionException2 =  I.FailedConnectionException2
pattern HttpFailedConnectionException2 a b c d <-  I.FailedConnectionException2 a b c d

-- constructor :: ExpectedBlankAfter100Continue
http_mk'ExpectedBlankAfter100Continue =  I.ExpectedBlankAfter100Continue
pattern HttpExpectedBlankAfter100Continue  <-  I.ExpectedBlankAfter100Continue

-- constructor :: ByteString -> InvalidStatusLine
http_mk'InvalidStatusLine =  I.InvalidStatusLine
pattern HttpInvalidStatusLine a <-  I.InvalidStatusLine a

-- constructor :: ByteString -> InvalidHeader
http_mk'InvalidHeader =  I.InvalidHeader
pattern HttpInvalidHeader a <-  I.InvalidHeader a

-- constructor :: IOException -> InternalIOException
http_mk'InternalIOException =  I.InternalIOException
pattern HttpInternalIOException a <-  I.InternalIOException a

-- constructor :: ByteString -> Int -> Either ByteString HttpException -> ProxyConnectException
http_mk'ProxyConnectException =  I.ProxyConnectException
pattern HttpProxyConnectException a b c <-  I.ProxyConnectException a b c

-- constructor :: NoResponseDataReceived
http_mk'NoResponseDataReceived =  I.NoResponseDataReceived
pattern HttpNoResponseDataReceived  <-  I.NoResponseDataReceived

-- constructor :: SomeException -> TlsException
http_mk'TlsException =  I.TlsException
pattern HttpTlsException a <-  I.TlsException a

-- constructor :: TlsNotSupported
http_mk'TlsNotSupported =  I.TlsNotSupported
pattern HttpTlsNotSupported  <-  I.TlsNotSupported

-- constructor :: Word64 -> Word64 -> ResponseBodyTooShort
http_mk'ResponseBodyTooShort =  I.ResponseBodyTooShort
pattern HttpResponseBodyTooShort a b <-  I.ResponseBodyTooShort a b

-- constructor :: InvalidChunkHeaders
http_mk'InvalidChunkHeaders =  I.InvalidChunkHeaders
pattern HttpInvalidChunkHeaders  <-  I.InvalidChunkHeaders

-- constructor :: IncompleteHeaders
http_mk'IncompleteHeaders =  I.IncompleteHeaders
pattern HttpIncompleteHeaders  <-  I.IncompleteHeaders

-- constructor :: ByteString -> InvalidDestinationHost
http_mk'InvalidDestinationHost =  I.InvalidDestinationHost
pattern HttpInvalidDestinationHost a <-  I.InvalidDestinationHost a

-- constructor :: ZlibException -> HttpZlibException
http_mk'HttpZlibException =  I.HttpZlibException
pattern HttpHttpZlibException a <-  I.HttpZlibException a

-- constructor :: Text -> Text -> InvalidProxyEnvironmentVariable
http_mk'InvalidProxyEnvironmentVariable =  I.InvalidProxyEnvironmentVariable
pattern HttpInvalidProxyEnvironmentVariable a b <-  I.InvalidProxyEnvironmentVariable a b

-- constructor :: ResponseLengthAndChunkingBothUsed
http_mk'ResponseLengthAndChunkingBothUsed =  I.ResponseLengthAndChunkingBothUsed
pattern HttpResponseLengthAndChunkingBothUsed  <-  I.ResponseLengthAndChunkingBothUsed

-- constructor :: SomeException -> ByteString -> Int -> TlsExceptionHostPort
http_mk'TlsExceptionHostPort =  I.TlsExceptionHostPort
pattern HttpTlsExceptionHostPort a b c <-  I.TlsExceptionHostPort a b c

type HttpManager  = I.Manager

type HttpManagerSettings  = I.ManagerSettings
get_http_managerConnCount o = I.managerConnCount o
set_http_managerConnCount x o = o { I.managerConnCount = x}
get_http_managerRawConnection o = I.managerRawConnection o
set_http_managerRawConnection x o = o { I.managerRawConnection = x}
get_http_managerTlsConnection o = I.managerTlsConnection o
set_http_managerTlsConnection x o = o { I.managerTlsConnection = x}
get_http_managerResponseTimeout o = I.managerResponseTimeout o
set_http_managerResponseTimeout x o = o { I.managerResponseTimeout = x}
get_http_managerRetryableException o = I.managerRetryableException o
set_http_managerRetryableException x o = o { I.managerRetryableException = x}
get_http_managerWrapIOException o = I.managerWrapIOException o
set_http_managerWrapIOException x o = o { I.managerWrapIOException = x}
get_http_managerIdleConnectionCount o = I.managerIdleConnectionCount o
set_http_managerIdleConnectionCount x o = o { I.managerIdleConnectionCount = x}
get_http_managerModifyRequest o = I.managerModifyRequest o
set_http_managerModifyRequest x o = o { I.managerModifyRequest = x}

type HttpNeedsPopper a = I.NeedsPopper a

type HttpPopper  = I.Popper

type HttpProxy  = I.Proxy
get_http_proxyHost o = I.proxyHost o
set_http_proxyHost x o = o { I.proxyHost = x}
get_http_proxyPort o = I.proxyPort o
set_http_proxyPort x o = o { I.proxyPort = x}

-- constructor :: ByteString -> Int -> Proxy
http_mk'Proxy =  I.Proxy
pattern HttpProxy a b <-  I.Proxy a b

type HttpProxyOverride  = I.ProxyOverride

type HttpRequest  = I.Request
get_http_method o = I.method o
set_http_method x o = o { I.method = x}
get_http_secure o = I.secure o
set_http_secure x o = o { I.secure = x}
get_http_host o = I.host o
set_http_host x o = o { I.host = x}
get_http_port o = I.port o
set_http_port x o = o { I.port = x}
get_http_path o = I.path o
set_http_path x o = o { I.path = x}
get_http_queryString o = I.queryString o
set_http_queryString x o = o { I.queryString = x}
get_http_requestHeaders o = I.requestHeaders o
set_http_requestHeaders x o = o { I.requestHeaders = x}
get_http_requestBody o = I.requestBody o
set_http_requestBody x o = o { I.requestBody = x}
get_http_proxy o = I.proxy o
set_http_proxy x o = o { I.proxy = x}
get_http_decompress o = I.decompress o
set_http_decompress x o = o { I.decompress = x}
get_http_redirectCount o = I.redirectCount o
set_http_redirectCount x o = o { I.redirectCount = x}
get_http_checkStatus o = I.checkStatus o
set_http_checkStatus x o = o { I.checkStatus = x}
get_http_responseTimeout o = I.responseTimeout o
set_http_responseTimeout x o = o { I.responseTimeout = x}
get_http_cookieJar o = I.cookieJar o
set_http_cookieJar x o = o { I.cookieJar = x}
get_http_requestVersion o = I.requestVersion o
set_http_requestVersion x o = o { I.requestVersion = x}

type HttpRequestBody  = I.RequestBody

-- constructor :: ByteString -> RequestBodyLBS
http_mk'RequestBodyLBS =  I.RequestBodyLBS
pattern HttpRequestBodyLBS a <-  I.RequestBodyLBS a

-- constructor :: ByteString -> RequestBodyBS
http_mk'RequestBodyBS =  I.RequestBodyBS
pattern HttpRequestBodyBS a <-  I.RequestBodyBS a

-- constructor :: Int64 -> Builder -> RequestBodyBuilder
http_mk'RequestBodyBuilder =  I.RequestBodyBuilder
pattern HttpRequestBodyBuilder a b <-  I.RequestBodyBuilder a b

-- constructor :: Int64 -> GivesPopper () -> RequestBodyStream
http_mk'RequestBodyStream =  I.RequestBodyStream
pattern HttpRequestBodyStream a b <-  I.RequestBodyStream a b

-- constructor :: GivesPopper () -> RequestBodyStreamChunked
http_mk'RequestBodyStreamChunked =  I.RequestBodyStreamChunked
pattern HttpRequestBodyStreamChunked a <-  I.RequestBodyStreamChunked a

type HttpResponse a = I.Response a
get_http_responseStatus o = I.responseStatus o
set_http_responseStatus x o = o { I.responseStatus = x}
get_http_responseVersion o = I.responseVersion o
set_http_responseVersion x o = o { I.responseVersion = x}
get_http_responseHeaders o = I.responseHeaders o
set_http_responseHeaders x o = o { I.responseHeaders = x}
get_http_responseBody o = I.responseBody o
set_http_responseBody x o = o { I.responseBody = x}
get_http_responseCookieJar o = I.responseCookieJar o
set_http_responseCookieJar x o = o { I.responseCookieJar = x}

type HttpStreamFileStatus  = I.StreamFileStatus
get_http_fileSize o = I.fileSize o
set_http_fileSize x o = o { I.fileSize = x}
get_http_readSoFar o = I.readSoFar o
set_http_readSoFar x o = o { I.readSoFar = x}
get_http_thisChunkSize o = I.thisChunkSize o
set_http_thisChunkSize x o = o { I.thisChunkSize = x}

-- constructor :: Int64 -> Int64 -> Int -> StreamFileStatus
http_mk'StreamFileStatus =  I.StreamFileStatus
pattern HttpStreamFileStatus a b c <-  I.StreamFileStatus a b c
