module Network.URI.AsUri
  ( module Network.URI.AsUri
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.URI as I


-- uri_escapeURIChar :: (Char -> Bool) -> Char -> String
uri_escapeURIChar = I.escapeURIChar

-- uri_escapeURIString :: (Char -> Bool) -> String -> String
uri_escapeURIString = I.escapeURIString

-- uri_isAbsoluteURI :: String -> Bool
uri_isAbsoluteURI = I.isAbsoluteURI

-- uri_isAllowedInURI :: Char -> Bool
uri_isAllowedInURI = I.isAllowedInURI

-- uri_isIPv4address :: String -> Bool
uri_isIPv4address = I.isIPv4address

-- uri_isIPv6address :: String -> Bool
uri_isIPv6address = I.isIPv6address

-- uri_isRelativeReference :: String -> Bool
uri_isRelativeReference = I.isRelativeReference

-- uri_isReserved :: Char -> Bool
uri_isReserved = I.isReserved

-- uri_isURI :: String -> Bool
uri_isURI = I.isURI

-- uri_isURIReference :: String -> Bool
uri_isURIReference = I.isURIReference

-- uri_isUnescapedInURI :: Char -> Bool
uri_isUnescapedInURI = I.isUnescapedInURI

-- uri_isUnescapedInURIComponent :: Char -> Bool
uri_isUnescapedInURIComponent = I.isUnescapedInURIComponent

-- uri_isUnreserved :: Char -> Bool
uri_isUnreserved = I.isUnreserved

-- uri_nonStrictRelativeTo :: URI -> URI -> URI
uri_nonStrictRelativeTo = I.nonStrictRelativeTo

-- uri_normalizeCase :: String -> String
uri_normalizeCase = I.normalizeCase

-- uri_normalizeEscape :: String -> String
uri_normalizeEscape = I.normalizeEscape

-- uri_normalizePathSegments :: String -> String
uri_normalizePathSegments = I.normalizePathSegments

-- uri_nullURI :: URI
uri_nullURI = I.nullURI

-- uri_parseAbsoluteURI :: String -> Maybe URI
uri_parseAbsoluteURI = I.parseAbsoluteURI

-- uri_parseRelativeReference :: String -> Maybe URI
uri_parseRelativeReference = I.parseRelativeReference

-- uri_parseURI :: String -> Maybe URI
uri_parseURI = I.parseURI

-- uri_parseURIReference :: String -> Maybe URI
uri_parseURIReference = I.parseURIReference

-- uri_relativeFrom :: URI -> URI -> URI
uri_relativeFrom = I.relativeFrom

-- uri_relativeTo :: URI -> URI -> URI
uri_relativeTo = I.relativeTo

-- uri_unEscapeString :: String -> String
uri_unEscapeString = I.unEscapeString

-- uri_uriIsAbsolute :: URI -> Bool
uri_uriIsAbsolute = I.uriIsAbsolute

-- uri_uriIsRelative :: URI -> Bool
uri_uriIsRelative = I.uriIsRelative

-- uri_uriToString :: (String -> String) -> URI -> ShowS
uri_uriToString = I.uriToString

type UriURI  = I.URI
get_uri_uriScheme o = I.uriScheme o
set_uri_uriScheme x o = o { I.uriScheme = x}
get_uri_uriAuthority o = I.uriAuthority o
set_uri_uriAuthority x o = o { I.uriAuthority = x}
get_uri_uriPath o = I.uriPath o
set_uri_uriPath x o = o { I.uriPath = x}
get_uri_uriQuery o = I.uriQuery o
set_uri_uriQuery x o = o { I.uriQuery = x}
get_uri_uriFragment o = I.uriFragment o
set_uri_uriFragment x o = o { I.uriFragment = x}

-- constructor :: String -> Maybe URIAuth -> String -> String -> String -> URI
uri_mk'URI =  I.URI
pattern UriURI a b c d e <-  I.URI a b c d e

type UriURIAuth  = I.URIAuth
get_uri_uriUserInfo o = I.uriUserInfo o
set_uri_uriUserInfo x o = o { I.uriUserInfo = x}
get_uri_uriRegName o = I.uriRegName o
set_uri_uriRegName x o = o { I.uriRegName = x}
get_uri_uriPort o = I.uriPort o
set_uri_uriPort x o = o { I.uriPort = x}

-- constructor :: String -> String -> String -> URIAuth
uri_mk'URIAuth =  I.URIAuth
pattern UriURIAuth a b c <-  I.URIAuth a b c
