module Network.Wai.Handler.Warp.AsWai
  ( module Network.Wai.Handler.Warp.AsWai
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.Wai.Handler.Warp as I


-- wai_getFileInfo :: Request -> FilePath -> IO FileInfo
wai_getFileInfo = I.getFileInfo

-- wai_getHost :: Settings -> HostPreference
wai_getHost = I.getHost

-- wai_getOnClose :: Settings -> SockAddr -> IO ()
wai_getOnClose = I.getOnClose

-- wai_getOnException :: Settings -> Maybe Request -> SomeException -> IO ()
wai_getOnException = I.getOnException

-- wai_getOnOpen :: Settings -> SockAddr -> IO Bool
wai_getOnOpen = I.getOnOpen

-- wai_getPort :: Settings -> Port
wai_getPort = I.getPort

-- wai_pauseTimeout :: Request -> IO ()
wai_pauseTimeout = I.pauseTimeout

-- wai_setBeforeMainLoop :: IO () -> Settings -> Settings
wai_setBeforeMainLoop = I.setBeforeMainLoop

-- wai_setFdCacheDuration :: Int -> Settings -> Settings
wai_setFdCacheDuration = I.setFdCacheDuration

-- wai_setFileInfoCacheDuration :: Int -> Settings -> Settings
wai_setFileInfoCacheDuration = I.setFileInfoCacheDuration

-- wai_setFork :: (((forall a. IO a -> IO a) -> IO ()) -> IO ()) -> Settings -> Settings
wai_setFork = I.setFork

-- wai_setHTTP2Disabled :: Settings -> Settings
wai_setHTTP2Disabled = I.setHTTP2Disabled

-- wai_setHost :: HostPreference -> Settings -> Settings
wai_setHost = I.setHost

-- wai_setInstallShutdownHandler :: (IO () -> IO ()) -> Settings -> Settings
wai_setInstallShutdownHandler = I.setInstallShutdownHandler

-- wai_setLogger :: (Request -> Status -> Maybe Integer -> IO ()) -> Settings -> Settings
wai_setLogger = I.setLogger

-- wai_setManager :: Manager -> Settings -> Settings
wai_setManager = I.setManager

-- wai_setMaximumBodyFlush :: Maybe Int -> Settings -> Settings
wai_setMaximumBodyFlush = I.setMaximumBodyFlush

-- wai_setNoParsePath :: Bool -> Settings -> Settings
wai_setNoParsePath = I.setNoParsePath

-- wai_setOnClose :: (SockAddr -> IO ()) -> Settings -> Settings
wai_setOnClose = I.setOnClose

-- wai_setOnException :: (Maybe Request -> SomeException -> IO ()) -> Settings -> Settings
wai_setOnException = I.setOnException

-- wai_setOnExceptionResponse :: (SomeException -> Response) -> Settings -> Settings
wai_setOnExceptionResponse = I.setOnExceptionResponse

-- wai_setOnOpen :: (SockAddr -> IO Bool) -> Settings -> Settings
wai_setOnOpen = I.setOnOpen

-- wai_setPort :: Port -> Settings -> Settings
wai_setPort = I.setPort

-- wai_setProxyProtocolNone :: Settings -> Settings
wai_setProxyProtocolNone = I.setProxyProtocolNone

-- wai_setProxyProtocolOptional :: Settings -> Settings
wai_setProxyProtocolOptional = I.setProxyProtocolOptional

-- wai_setProxyProtocolRequired :: Settings -> Settings
wai_setProxyProtocolRequired = I.setProxyProtocolRequired

-- wai_setServerName :: ByteString -> Settings -> Settings
wai_setServerName = I.setServerName

-- wai_setSlowlorisSize :: Int -> Settings -> Settings
wai_setSlowlorisSize = I.setSlowlorisSize

-- wai_setTimeout :: Int -> Settings -> Settings
wai_setTimeout = I.setTimeout

-- wai_allocateBuffer :: Int -> IO Buffer
wai_allocateBuffer = I.allocateBuffer

-- wai_bufferSize :: BufSize
wai_bufferSize = I.bufferSize

-- wai_freeBuffer :: Buffer -> IO ()
wai_freeBuffer = I.freeBuffer

-- wai_getDate :: DateCache -> IO GMTDate
wai_getDate = I.getDate

-- wai_withDateCache :: forall a. (DateCache -> IO a) -> IO a
wai_withDateCache = I.withDateCache

-- wai_getFd :: MutableFdCache -> FilePath -> IO (Fd, Refresh)
wai_getFd = I.getFd

-- wai_withFdCache :: forall a. Int -> (Maybe MutableFdCache -> IO a) -> IO a
wai_withFdCache = I.withFdCache

-- wai_requestMaxIndex :: Int
wai_requestMaxIndex = I.requestMaxIndex

-- wai_recvRequest :: Settings -> Connection -> InternalInfo -> SockAddr -> Source -> IO (Request, Maybe (IORef Int), IndexedHeader, IO ByteString)
wai_recvRequest = I.recvRequest

-- wai_sendResponse :: Settings -> Connection -> InternalInfo -> Request -> IndexedHeader -> IO ByteString -> Response -> IO Bool
wai_sendResponse = I.sendResponse

-- wai_warpVersion :: String
wai_warpVersion = I.warpVersion

-- wai_run :: Port -> Application -> IO ()
wai_run = I.run

-- wai_runEnv :: Port -> Application -> IO ()
wai_runEnv = I.runEnv

-- wai_runHTTP2 :: Port -> HTTP2Application -> Application -> IO ()
wai_runHTTP2 = I.runHTTP2

-- wai_runHTTP2Env :: Port -> HTTP2Application -> Application -> IO ()
wai_runHTTP2Env = I.runHTTP2Env

-- wai_runHTTP2Settings :: Settings -> HTTP2Application -> Application -> IO ()
wai_runHTTP2Settings = I.runHTTP2Settings

-- wai_runHTTP2SettingsSocket :: Settings -> Socket -> HTTP2Application -> Application -> IO ()
wai_runHTTP2SettingsSocket = I.runHTTP2SettingsSocket

-- wai_runSettings :: Settings -> Application -> IO ()
wai_runSettings = I.runSettings

-- wai_runSettingsConnection :: Settings -> IO (Connection, SockAddr) -> Application -> IO ()
wai_runSettingsConnection = I.runSettingsConnection

-- wai_runSettingsConnectionMaker :: Settings -> IO (IO Connection, SockAddr) -> Application -> IO ()
wai_runSettingsConnectionMaker = I.runSettingsConnectionMaker

-- wai_runSettingsConnectionMakerSecure :: Settings -> IO (IO (Connection, Transport), SockAddr) -> Application -> IO ()
wai_runSettingsConnectionMakerSecure = I.runSettingsConnectionMakerSecure

-- wai_runSettingsSocket :: Settings -> Socket -> Application -> IO ()
wai_runSettingsSocket = I.runSettingsSocket

-- wai_socketConnection :: Socket -> IO Connection
wai_socketConnection = I.socketConnection

-- wai_readSendFile :: Buffer -> BufSize -> (ByteString -> IO ()) -> SendFile
wai_readSendFile = I.readSendFile

-- wai_sendFile :: Socket -> Buffer -> BufSize -> (ByteString -> IO ()) -> SendFile
wai_sendFile = I.sendFile

-- wai_defaultOnException :: Maybe Request -> SomeException -> IO ()
wai_defaultOnException = I.defaultOnException

-- wai_defaultOnExceptionResponse :: SomeException -> Response
wai_defaultOnExceptionResponse = I.defaultOnExceptionResponse

-- wai_defaultSettings :: Settings
wai_defaultSettings = I.defaultSettings

-- wai_defaultShouldDisplayException :: SomeException -> Bool
wai_defaultShouldDisplayException = I.defaultShouldDisplayException

-- wai_exceptionResponseForDebug :: SomeException -> Response
wai_exceptionResponseForDebug = I.exceptionResponseForDebug

-- wai_cancel :: Handle -> IO ()
wai_cancel = I.cancel

-- wai_initialize :: Int -> IO Manager
wai_initialize = I.initialize

-- wai_pause :: Handle -> IO ()
wai_pause = I.pause

-- wai_register :: Manager -> TimeoutAction -> IO Handle
wai_register = I.register

-- wai_registerKillThread :: Manager -> IO Handle
wai_registerKillThread = I.registerKillThread

-- wai_resume :: Handle -> IO ()
wai_resume = I.resume

-- wai_stopManager :: Manager -> IO ()
wai_stopManager = I.stopManager

-- wai_tickle :: Handle -> IO ()
wai_tickle = I.tickle

-- wai_withManager :: forall a. Int -> (Manager -> IO a) -> IO a
wai_withManager = I.withManager

type WaiHostPreference  = I.HostPreference

type WaiDateCache  = I.DateCache

type WaiGMTDate  = I.GMTDate

type WaiMutableFdCache  = I.MutableFdCache

type WaiRefresh  = I.Refresh

type WaiFileInfo  = I.FileInfo
get_wai_fileInfoName o = I.fileInfoName o
set_wai_fileInfoName x o = o { I.fileInfoName = x}
get_wai_fileInfoSize o = I.fileInfoSize o
set_wai_fileInfoSize x o = o { I.fileInfoSize = x}
get_wai_fileInfoTime o = I.fileInfoTime o
set_wai_fileInfoTime x o = o { I.fileInfoTime = x}
get_wai_fileInfoDate o = I.fileInfoDate o
set_wai_fileInfoDate x o = o { I.fileInfoDate = x}

-- constructor :: FilePath -> Integer -> HTTPDate -> ByteString -> FileInfo
wai_mk'FileInfo =  I.FileInfo
pattern WaiFileInfo a b c d <-  I.FileInfo a b c d

type WaiIndexedHeader  = I.IndexedHeader

type WaiSettings  = I.Settings

type WaiHandle  = I.Handle

type WaiManager  = I.Manager

type WaiTimeoutAction  = I.TimeoutAction

type WaiTimeoutThread  = I.TimeoutThread

-- constructor :: TimeoutThread
wai_mk'TimeoutThread =  I.TimeoutThread
pattern WaiTimeoutThread  <-  I.TimeoutThread 

type WaiBufSize  = I.BufSize

type WaiBuffer  = I.Buffer

type WaiConnection  = I.Connection
get_wai_connSendMany o = I.connSendMany o
set_wai_connSendMany x o = o { I.connSendMany = x}
get_wai_connSendAll o = I.connSendAll o
set_wai_connSendAll x o = o { I.connSendAll = x}
get_wai_connSendFile o = I.connSendFile o
set_wai_connSendFile x o = o { I.connSendFile = x}
get_wai_connClose o = I.connClose o
set_wai_connClose x o = o { I.connClose = x}
get_wai_connRecv o = I.connRecv o
set_wai_connRecv x o = o { I.connRecv = x}
get_wai_connRecvBuf o = I.connRecvBuf o
set_wai_connRecvBuf x o = o { I.connRecvBuf = x}
get_wai_connWriteBuffer o = I.connWriteBuffer o
set_wai_connWriteBuffer x o = o { I.connWriteBuffer = x}
get_wai_connBufferSize o = I.connBufferSize o
set_wai_connBufferSize x o = o { I.connBufferSize = x}

-- constructor :: [ByteString] -> IO () -> ByteString -> IO () -> SendFile -> IO () -> Recv -> RecvBuf -> Buffer -> BufSize -> Connection
wai_mk'Connection =  I.Connection
pattern WaiConnection a b c d e f g h <-  I.Connection a b c d e f g h

type WaiFileId  = I.FileId
get_wai_fileIdPath o = I.fileIdPath o
set_wai_fileIdPath x o = o { I.fileIdPath = x}
get_wai_fileIdFd o = I.fileIdFd o
set_wai_fileIdFd x o = o { I.fileIdFd = x}

-- constructor :: FilePath -> Maybe Fd -> FileId
wai_mk'FileId =  I.FileId
pattern WaiFileId a b <-  I.FileId a b

type WaiHeaderValue  = I.HeaderValue

type WaiInternalInfo  = I.InternalInfo
get_wai_threadHandle o = I.threadHandle o
set_wai_threadHandle x o = o { I.threadHandle = x}
get_wai_timeoutManager o = I.timeoutManager o
set_wai_timeoutManager x o = o { I.timeoutManager = x}
get_wai_fdCacher o = I.fdCacher o
set_wai_fdCacher x o = o { I.fdCacher = x}
get_wai_fileInfo o = I.fileInfo o
set_wai_fileInfo x o = o { I.fileInfo = x}
get_wai_dateCacher o = I.dateCacher o
set_wai_dateCacher x o = o { I.dateCacher = x}

-- constructor :: Handle -> Manager -> Maybe MutableFdCache -> FilePath -> IO FileInfo -> DateCache -> InternalInfo
wai_mk'InternalInfo =  I.InternalInfo
pattern WaiInternalInfo a b c d e <-  I.InternalInfo a b c d e

type WaiInvalidRequest  = I.InvalidRequest

-- constructor :: [String] -> NotEnoughLines
wai_mk'NotEnoughLines =  I.NotEnoughLines
pattern WaiNotEnoughLines a <-  I.NotEnoughLines a

-- constructor :: String -> BadFirstLine
wai_mk'BadFirstLine =  I.BadFirstLine
pattern WaiBadFirstLine a <-  I.BadFirstLine a

-- constructor :: NonHttp
wai_mk'NonHttp =  I.NonHttp
pattern WaiNonHttp  <-  I.NonHttp 

-- constructor :: IncompleteHeaders
wai_mk'IncompleteHeaders =  I.IncompleteHeaders
pattern WaiIncompleteHeaders  <-  I.IncompleteHeaders 

-- constructor :: ConnectionClosedByPeer
wai_mk'ConnectionClosedByPeer =  I.ConnectionClosedByPeer
pattern WaiConnectionClosedByPeer  <-  I.ConnectionClosedByPeer 

-- constructor :: OverLargeHeader
wai_mk'OverLargeHeader =  I.OverLargeHeader
pattern WaiOverLargeHeader  <-  I.OverLargeHeader 

-- constructor :: String -> BadProxyHeader
wai_mk'BadProxyHeader =  I.BadProxyHeader
pattern WaiBadProxyHeader a <-  I.BadProxyHeader a

type WaiPort  = I.Port

type WaiSendFile  = I.SendFile

type WaiSource  = I.Source

type WaiTransport  = I.Transport

-- constructor :: TCP
wai_mk'TCP =  I.TCP
pattern WaiTCP  <-  I.TCP 
get_wai_tlsMajorVersion o = I.tlsMajorVersion o
set_wai_tlsMajorVersion x o = o { I.tlsMajorVersion = x}
get_wai_tlsMinorVersion o = I.tlsMinorVersion o
set_wai_tlsMinorVersion x o = o { I.tlsMinorVersion = x}
get_wai_tlsNegotiatedProtocol o = I.tlsNegotiatedProtocol o
set_wai_tlsNegotiatedProtocol x o = o { I.tlsNegotiatedProtocol = x}
get_wai_tlsChiperID o = I.tlsChiperID o
set_wai_tlsChiperID x o = o { I.tlsChiperID = x}

-- constructor :: Int -> Int -> Maybe ByteString -> Word16 -> TLS
wai_mk'TLS =  I.TLS
pattern WaiTLS a b c d <-  I.TLS a b c d
