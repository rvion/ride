module Network.Wai.Handler.Warp.AsWai where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.Wai.Handler.Warp as I

-- wai_getFileInfo :: Request -> FilePath -> IO FileInfo
wai_getFileInfo = I.getFileInfo

-- wai_getHost :: Settings -> HostPreference
wai_getHost = I.getHost

-- wai_getOnClose :: Settings -> SockAddr -> IO ()
wai_getOnClose = I.getOnClose

-- wai_getOnException :: Settings -> Maybe Request -> SomeException -> IO ()
wai_getOnException = I.getOnException

-- wai_getOnOpen :: Settings -> SockAddr -> IO Bool
wai_getOnOpen = I.getOnOpen

-- wai_getPort :: Settings -> Port
wai_getPort = I.getPort

-- wai_pauseTimeout :: Request -> IO ()
wai_pauseTimeout = I.pauseTimeout

-- wai_setBeforeMainLoop :: IO () -> Settings -> Settings
wai_setBeforeMainLoop = I.setBeforeMainLoop

-- wai_setFdCacheDuration :: Int -> Settings -> Settings
wai_setFdCacheDuration = I.setFdCacheDuration

-- wai_setFileInfoCacheDuration :: Int -> Settings -> Settings
wai_setFileInfoCacheDuration = I.setFileInfoCacheDuration

-- wai_setFork :: (((forall a. IO a -> IO a) -> IO ()) -> IO ()) -> Settings -> Settings
wai_setFork = I.setFork

-- wai_setHTTP2Disabled :: Settings -> Settings
wai_setHTTP2Disabled = I.setHTTP2Disabled

-- wai_setHost :: HostPreference -> Settings -> Settings
wai_setHost = I.setHost

-- wai_setInstallShutdownHandler :: (IO () -> IO ()) -> Settings -> Settings
wai_setInstallShutdownHandler = I.setInstallShutdownHandler

-- wai_setLogger :: (Request -> Status -> Maybe Integer -> IO ()) -> Settings -> Settings
wai_setLogger = I.setLogger

-- wai_setManager :: Manager -> Settings -> Settings
wai_setManager = I.setManager

-- wai_setMaximumBodyFlush :: Maybe Int -> Settings -> Settings
wai_setMaximumBodyFlush = I.setMaximumBodyFlush

-- wai_setNoParsePath :: Bool -> Settings -> Settings
wai_setNoParsePath = I.setNoParsePath

-- wai_setOnClose :: (SockAddr -> IO ()) -> Settings -> Settings
wai_setOnClose = I.setOnClose

-- wai_setOnException :: (Maybe Request -> SomeException -> IO ()) -> Settings -> Settings
wai_setOnException = I.setOnException

-- wai_setOnExceptionResponse :: (SomeException -> Response) -> Settings -> Settings
wai_setOnExceptionResponse = I.setOnExceptionResponse

-- wai_setOnOpen :: (SockAddr -> IO Bool) -> Settings -> Settings
wai_setOnOpen = I.setOnOpen

-- wai_setPort :: Port -> Settings -> Settings
wai_setPort = I.setPort

-- wai_setProxyProtocolNone :: Settings -> Settings
wai_setProxyProtocolNone = I.setProxyProtocolNone

-- wai_setProxyProtocolOptional :: Settings -> Settings
wai_setProxyProtocolOptional = I.setProxyProtocolOptional

-- wai_setProxyProtocolRequired :: Settings -> Settings
wai_setProxyProtocolRequired = I.setProxyProtocolRequired

-- wai_setServerName :: ByteString -> Settings -> Settings
wai_setServerName = I.setServerName

-- wai_setSlowlorisSize :: Int -> Settings -> Settings
wai_setSlowlorisSize = I.setSlowlorisSize

-- wai_setTimeout :: Int -> Settings -> Settings
wai_setTimeout = I.setTimeout

-- wai_allocateBuffer :: Int -> IO Buffer
wai_allocateBuffer = I.allocateBuffer

-- wai_bufferSize :: BufSize
wai_bufferSize = I.bufferSize

-- wai_freeBuffer :: Buffer -> IO ()
wai_freeBuffer = I.freeBuffer

-- wai_getDate :: DateCache -> IO GMTDate
wai_getDate = I.getDate

-- wai_withDateCache :: forall a. (DateCache -> IO a) -> IO a
wai_withDateCache = I.withDateCache

-- wai_getFd :: MutableFdCache -> FilePath -> IO (Fd, Refresh)
wai_getFd = I.getFd

-- wai_withFdCache :: forall a. Int -> (Maybe MutableFdCache -> IO a) -> IO a
wai_withFdCache = I.withFdCache

-- wai_requestMaxIndex :: Int
wai_requestMaxIndex = I.requestMaxIndex

-- wai_recvRequest :: Settings -> Connection -> InternalInfo -> SockAddr -> Source -> IO (Request, Maybe (IORef Int), IndexedHeader, IO ByteString)
wai_recvRequest = I.recvRequest

-- wai_sendResponse :: Settings -> Connection -> InternalInfo -> Request -> IndexedHeader -> IO ByteString -> Response -> IO Bool
wai_sendResponse = I.sendResponse

-- wai_warpVersion :: String
wai_warpVersion = I.warpVersion

-- wai_run :: Port -> Application -> IO ()
wai_run = I.run

-- wai_runEnv :: Port -> Application -> IO ()
wai_runEnv = I.runEnv

-- wai_runHTTP2 :: Port -> HTTP2Application -> Application -> IO ()
wai_runHTTP2 = I.runHTTP2

-- wai_runHTTP2Env :: Port -> HTTP2Application -> Application -> IO ()
wai_runHTTP2Env = I.runHTTP2Env

-- wai_runHTTP2Settings :: Settings -> HTTP2Application -> Application -> IO ()
wai_runHTTP2Settings = I.runHTTP2Settings

-- wai_runHTTP2SettingsSocket :: Settings -> Socket -> HTTP2Application -> Application -> IO ()
wai_runHTTP2SettingsSocket = I.runHTTP2SettingsSocket

-- wai_runSettings :: Settings -> Application -> IO ()
wai_runSettings = I.runSettings

-- wai_runSettingsConnection :: Settings -> IO (Connection, SockAddr) -> Application -> IO ()
wai_runSettingsConnection = I.runSettingsConnection

-- wai_runSettingsConnectionMaker :: Settings -> IO (IO Connection, SockAddr) -> Application -> IO ()
wai_runSettingsConnectionMaker = I.runSettingsConnectionMaker

-- wai_runSettingsConnectionMakerSecure :: Settings -> IO (IO (Connection, Transport), SockAddr) -> Application -> IO ()
wai_runSettingsConnectionMakerSecure = I.runSettingsConnectionMakerSecure

-- wai_runSettingsSocket :: Settings -> Socket -> Application -> IO ()
wai_runSettingsSocket = I.runSettingsSocket

-- wai_socketConnection :: Socket -> IO Connection
wai_socketConnection = I.socketConnection

-- wai_readSendFile :: Buffer -> BufSize -> (ByteString -> IO ()) -> SendFile
wai_readSendFile = I.readSendFile

-- wai_sendFile :: Socket -> Buffer -> BufSize -> (ByteString -> IO ()) -> SendFile
wai_sendFile = I.sendFile

-- wai_defaultOnException :: Maybe Request -> SomeException -> IO ()
wai_defaultOnException = I.defaultOnException

-- wai_defaultOnExceptionResponse :: SomeException -> Response
wai_defaultOnExceptionResponse = I.defaultOnExceptionResponse

-- wai_defaultSettings :: Settings
wai_defaultSettings = I.defaultSettings

-- wai_defaultShouldDisplayException :: SomeException -> Bool
wai_defaultShouldDisplayException = I.defaultShouldDisplayException

-- wai_exceptionResponseForDebug :: SomeException -> Response
wai_exceptionResponseForDebug = I.exceptionResponseForDebug

-- wai_cancel :: Handle -> IO ()
wai_cancel = I.cancel

-- wai_initialize :: Int -> IO Manager
wai_initialize = I.initialize

-- wai_pause :: Handle -> IO ()
wai_pause = I.pause

-- wai_register :: Manager -> TimeoutAction -> IO Handle
wai_register = I.register

-- wai_registerKillThread :: Manager -> IO Handle
wai_registerKillThread = I.registerKillThread

-- wai_resume :: Handle -> IO ()
wai_resume = I.resume

-- wai_stopManager :: Manager -> IO ()
wai_stopManager = I.stopManager

-- wai_tickle :: Handle -> IO ()
wai_tickle = I.tickle

-- wai_withManager :: forall a. Int -> (Manager -> IO a) -> IO a
wai_withManager = I.withManager

type WaiHostPreference  = I.HostPreference
type WaiDateCache  = I.DateCache
type WaiGMTDate  = I.GMTDate
type WaiMutableFdCache  = I.MutableFdCache
type WaiRefresh  = I.Refresh
type WaiFileInfo  = I.FileInfo
-- wai_fileInfoDate :: FileInfo -> ByteString
wai_fileInfoDate = I.fileInfoDate

-- wai_fileInfoName :: FileInfo -> FilePath
wai_fileInfoName = I.fileInfoName

-- wai_fileInfoSize :: FileInfo -> Integer
wai_fileInfoSize = I.fileInfoSize

-- wai_fileInfoTime :: FileInfo -> HTTPDate
wai_fileInfoTime = I.fileInfoTime

type WaiIndexedHeader  = I.IndexedHeader
type WaiSettings  = I.Settings
type WaiHandle  = I.Handle
type WaiManager  = I.Manager
type WaiTimeoutAction  = I.TimeoutAction
type WaiTimeoutThread  = I.TimeoutThread
type WaiBufSize  = I.BufSize
type WaiBuffer  = I.Buffer
type WaiConnection  = I.Connection
-- wai_connBufferSize :: Connection -> BufSize
wai_connBufferSize = I.connBufferSize

-- wai_connClose :: Connection -> IO ()
wai_connClose = I.connClose

-- wai_connRecv :: Connection -> Recv
wai_connRecv = I.connRecv

-- wai_connRecvBuf :: Connection -> RecvBuf
wai_connRecvBuf = I.connRecvBuf

-- wai_connSendAll :: Connection -> ByteString -> IO ()
wai_connSendAll = I.connSendAll

-- wai_connSendFile :: Connection -> SendFile
wai_connSendFile = I.connSendFile

-- wai_connSendMany :: Connection -> [ByteString] -> IO ()
wai_connSendMany = I.connSendMany

-- wai_connWriteBuffer :: Connection -> Buffer
wai_connWriteBuffer = I.connWriteBuffer

type WaiFileId  = I.FileId
-- wai_fileIdFd :: FileId -> Maybe Fd
wai_fileIdFd = I.fileIdFd

-- wai_fileIdPath :: FileId -> FilePath
wai_fileIdPath = I.fileIdPath

type WaiHeaderValue  = I.HeaderValue
type WaiInternalInfo  = I.InternalInfo
-- wai_dateCacher :: InternalInfo -> DateCache
wai_dateCacher = I.dateCacher

-- wai_fdCacher :: InternalInfo -> Maybe MutableFdCache
wai_fdCacher = I.fdCacher

-- wai_fileInfo :: InternalInfo -> FilePath -> IO FileInfo
wai_fileInfo = I.fileInfo

-- wai_threadHandle :: InternalInfo -> Handle
wai_threadHandle = I.threadHandle

-- wai_timeoutManager :: InternalInfo -> Manager
wai_timeoutManager = I.timeoutManager

type WaiInvalidRequest  = I.InvalidRequest
type WaiPort  = I.Port
type WaiSendFile  = I.SendFile
type WaiSource  = I.Source
type WaiTransport  = I.Transport
-- wai_tlsChiperID :: Transport -> Word16
wai_tlsChiperID = I.tlsChiperID

-- wai_tlsMajorVersion :: Transport -> Int
wai_tlsMajorVersion = I.tlsMajorVersion

-- wai_tlsMinorVersion :: Transport -> Int
wai_tlsMinorVersion = I.tlsMinorVersion

-- wai_tlsNegotiatedProtocol :: Transport -> Maybe ByteString
wai_tlsNegotiatedProtocol = I.tlsNegotiatedProtocol

