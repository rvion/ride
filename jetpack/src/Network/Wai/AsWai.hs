module Network.Wai.AsWai where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Network.Wai as I

-- wai_defaultRequest :: Request
wai_defaultRequest = I.defaultRequest

-- wai_ifRequest :: (Request -> Bool) -> Middleware -> Middleware
wai_ifRequest = I.ifRequest

-- wai_lazyRequestBody :: Request -> IO ByteString
wai_lazyRequestBody = I.lazyRequestBody

-- wai_mapResponseHeaders :: (ResponseHeaders -> ResponseHeaders) -> Response -> Response
wai_mapResponseHeaders = I.mapResponseHeaders

-- wai_modifyResponse :: (Response -> Response) -> Middleware
wai_modifyResponse = I.modifyResponse

-- wai_responseBuilder :: Status -> ResponseHeaders -> Builder -> Response
wai_responseBuilder = I.responseBuilder

-- wai_responseFile :: Status -> ResponseHeaders -> FilePath -> Maybe FilePart -> Response
wai_responseFile = I.responseFile

-- wai_responseHeaders :: Response -> ResponseHeaders
wai_responseHeaders = I.responseHeaders

-- wai_responseLBS :: Status -> ResponseHeaders -> ByteString -> Response
wai_responseLBS = I.responseLBS

-- wai_responseRaw :: (IO ByteString -> (ByteString -> IO ()) -> IO ()) -> Response -> Response
wai_responseRaw = I.responseRaw

-- wai_responseStatus :: Response -> Status
wai_responseStatus = I.responseStatus

-- wai_responseStream :: Status -> ResponseHeaders -> StreamingBody -> Response
wai_responseStream = I.responseStream

-- wai_responseToStream :: forall a. Response -> (Status, ResponseHeaders, (StreamingBody -> IO a) -> IO a)
wai_responseToStream = I.responseToStream

-- wai_strictRequestBody :: Request -> IO ByteString
wai_strictRequestBody = I.strictRequestBody

type WaiApplication  = I.Application
type WaiMiddleware  = I.Middleware
type WaiFilePart  = I.FilePart
-- wai_filePartByteCount :: FilePart -> Integer
wai_filePartByteCount = I.filePartByteCount

-- wai_filePartFileSize :: FilePart -> Integer
wai_filePartFileSize = I.filePartFileSize

-- wai_filePartOffset :: FilePart -> Integer
wai_filePartOffset = I.filePartOffset

type WaiRequest  = I.Request
-- wai_httpVersion :: Request -> HttpVersion
wai_httpVersion = I.httpVersion

-- wai_isSecure :: Request -> Bool
wai_isSecure = I.isSecure

-- wai_pathInfo :: Request -> [Text]
wai_pathInfo = I.pathInfo

-- wai_queryString :: Request -> Query
wai_queryString = I.queryString

-- wai_rawPathInfo :: Request -> ByteString
wai_rawPathInfo = I.rawPathInfo

-- wai_rawQueryString :: Request -> ByteString
wai_rawQueryString = I.rawQueryString

-- wai_remoteHost :: Request -> SockAddr
wai_remoteHost = I.remoteHost

-- wai_requestBody :: Request -> IO ByteString
wai_requestBody = I.requestBody

-- wai_requestBodyLength :: Request -> RequestBodyLength
wai_requestBodyLength = I.requestBodyLength

-- wai_requestHeaderHost :: Request -> Maybe ByteString
wai_requestHeaderHost = I.requestHeaderHost

-- wai_requestHeaderRange :: Request -> Maybe ByteString
wai_requestHeaderRange = I.requestHeaderRange

-- wai_requestHeaders :: Request -> RequestHeaders
wai_requestHeaders = I.requestHeaders

-- wai_requestMethod :: Request -> Method
wai_requestMethod = I.requestMethod

-- wai_vault :: Request -> Vault
wai_vault = I.vault

type WaiRequestBodyLength  = I.RequestBodyLength
type WaiResponse  = I.Response
type WaiResponseReceived  = I.ResponseReceived
type WaiStreamingBody  = I.StreamingBody
