 -- generated by rvion/jetpack-gen 
module Data.Conduit.Binary.AsCb where
import Data.Conduit.Binary

-- ($s$fOrdPtr_$c>=) doesn't seem to be exported
-- ($wa) doesn't seem to be exported
-- ($wa1) doesn't seem to be exported
-- ($wa2) doesn't seem to be exported
-- ($wa3) doesn't seem to be exported
-- ($wtake) doesn't seem to be exported

cb_conduitFile :: forall (m :: * -> *).
  MonadResource m =>
  FilePath -> Conduit ByteString m ByteString
cb_conduitFile =  T.conduitFile
-- (conduitFile1) doesn't seem to be exported

cb_conduitHandle :: forall (m :: * -> *).
  MonadIO m =>
  Handle -> Conduit ByteString m ByteString
cb_conduitHandle =  T.conduitHandle

cb_drop :: forall (m :: * -> *). Monad m => Int -> Consumer ByteString m ()
cb_drop =  T.drop
-- (drop1) doesn't seem to be exported
-- (drop2) doesn't seem to be exported

cb_dropWhile :: forall (m :: * -> *).
  Monad m =>
  (Word8 -> Bool) -> Consumer ByteString m ()
cb_dropWhile =  T.dropWhile
-- (dropWhile1) doesn't seem to be exported

cb_head :: forall (m :: * -> *).
  Monad m =>
  Consumer ByteString m (Maybe Word8)
cb_head =  T.head
-- (head1) doesn't seem to be exported

cb_isolate :: forall (m :: * -> *).
  Monad m =>
  Int -> Conduit ByteString m ByteString
cb_isolate =  T.isolate
-- (isolate1) doesn't seem to be exported

cb_lines :: forall (m :: * -> *). Monad m => Conduit ByteString m ByteString
cb_lines =  T.lines

cb_mapM_ :: forall (m :: * -> *).
  Monad m =>
  (Word8 -> m ()) -> Consumer ByteString m ()
cb_mapM_ =  T.mapM_
-- (mapM_BS) doesn't seem to be exported

cb_sinkCacheLength :: forall (m1 :: * -> *) (m2 :: * -> *).
  (MonadResource m1, MonadResource m2) =>
  Sink ByteString m1 (Word64, Source m2 ByteString)
cb_sinkCacheLength =  T.sinkCacheLength

cb_sinkFile :: forall (m :: * -> *).
  MonadResource m =>
  FilePath -> Consumer ByteString m ()
cb_sinkFile =  T.sinkFile

cb_sinkHandle :: forall (m :: * -> *).
  MonadIO m =>
  Handle -> Consumer ByteString m ()
cb_sinkHandle =  T.sinkHandle

cb_sinkIOHandle :: forall (m :: * -> *).
  MonadResource m =>
  IO Handle -> Consumer ByteString m ()
cb_sinkIOHandle =  T.sinkIOHandle
-- (sinkIOHandle1) doesn't seem to be exported

cb_sinkLbs :: forall (m :: * -> *). Monad m => Sink ByteString m ByteString
cb_sinkLbs =  T.sinkLbs
-- (sinkLbs1) doesn't seem to be exported
-- (sinkLbs2) doesn't seem to be exported
-- (sinkLbs3) doesn't seem to be exported

cb_sourceFile :: forall (m :: * -> *).
  MonadResource m =>
  FilePath -> Producer m ByteString
cb_sourceFile =  T.sourceFile

cb_sourceFileRange :: forall (m :: * -> *).
  MonadResource m =>
  FilePath -> Maybe Integer -> Maybe Integer -> Producer m ByteString
cb_sourceFileRange =  T.sourceFileRange

cb_sourceHandle :: forall (m :: * -> *). MonadIO m => Handle -> Producer m ByteString
cb_sourceHandle =  T.sourceHandle

cb_sourceHandleRange :: forall (m :: * -> *).
  MonadIO m =>
  Handle -> Maybe Integer -> Maybe Integer -> Producer m ByteString
cb_sourceHandleRange =  T.sourceHandleRange

cb_sourceHandleRangeWithBuffer :: forall (m :: * -> *).
  MonadIO m =>
  Handle
  -> Maybe Integer -> Maybe Integer -> Int -> Producer m ByteString
cb_sourceHandleRangeWithBuffer =  T.sourceHandleRangeWithBuffer

cb_sourceHandleUnsafe :: forall (m :: * -> *). MonadIO m => Handle -> Source m ByteString
cb_sourceHandleUnsafe =  T.sourceHandleUnsafe

cb_sourceIOHandle :: forall (m :: * -> *).
  MonadResource m =>
  IO Handle -> Producer m ByteString
cb_sourceIOHandle =  T.sourceIOHandle

cb_sourceLbs :: forall (m :: * -> *).
  Monad m =>
  ByteString -> Producer m ByteString
cb_sourceLbs =  T.sourceLbs

cb_take :: forall (m :: * -> *).
  Monad m =>
  Int -> Consumer ByteString m ByteString
cb_take =  T.take
-- (take1) doesn't seem to be exported
-- (take2) doesn't seem to be exported

cb_takeWhile :: forall (m :: * -> *).
  Monad m =>
  (Word8 -> Bool) -> Conduit ByteString m ByteString
cb_takeWhile =  T.takeWhile
-- (takeWhile1) doesn't seem to be exported
