-- generated by rvion/jetpack-gen 
module AsBs where
import Data.ByteString

-- ($wa) doesn't seem to be exported
-- ($wa1) doesn't seem to be exported
-- ($wa10) doesn't seem to be exported
-- ($wa2) doesn't seem to be exported
-- ($wa3) doesn't seem to be exported
-- ($wa4) doesn't seem to be exported
-- ($wa5) doesn't seem to be exported
-- ($wa6) doesn't seem to be exported
-- ($wa7) doesn't seem to be exported
-- ($wa8) doesn't seem to be exported
-- ($wa9) doesn't seem to be exported
-- ($wbreakSubstring) doesn't seem to be exported
-- ($wconcatMap) doesn't seem to be exported
-- ($wcopy) doesn't seem to be exported
-- ($wfindFromEndUntil) doesn't seem to be exported
-- ($wfindIndices) doesn't seem to be exported
-- ($wfindSubstrings) doesn't seem to be exported
-- ($wgroup) doesn't seem to be exported
-- ($wgroupBy) doesn't seem to be exported
-- ($winits) doesn't seem to be exported
-- ($wintersperse) doesn't seem to be exported
-- ($wisPrefixOf) doesn't seem to be exported
-- ($wisSuffixOf) doesn't seem to be exported
-- ($wpartition) doesn't seem to be exported
-- ($wreplicate) doesn't seem to be exported
-- ($wreverse) doesn't seem to be exported
-- ($wsort) doesn't seem to be exported
-- ($wtails) doesn't seem to be exported
-- ($wzip) doesn't seem to be exported
-- ($wzipWith) doesn't seem to be exported

bs_all :: (Word8 -> Bool) -> ByteString -> Bool
bs_all =  T.all

bs_any :: (Word8 -> Bool) -> ByteString -> Bool
bs_any =  T.any

bs_append :: ByteString -> ByteString -> ByteString
bs_append =  T.append

bs_appendFile :: FilePath -> ByteString -> IO ()
bs_appendFile =  T.appendFile
-- (appendFile1) doesn't seem to be exported
-- (appendFile2) doesn't seem to be exported

bs_break :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
bs_break =  T.break

bs_breakByte :: Word8 -> ByteString -> (ByteString, ByteString)
bs_breakByte =  T.breakByte

bs_breakEnd :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
bs_breakEnd =  T.breakEnd

bs_breakSubstring :: ByteString -> ByteString -> (ByteString, ByteString)
bs_breakSubstring =  T.breakSubstring

bs_concat :: [ByteString] -> ByteString
bs_concat =  T.concat

bs_concatMap :: (Word8 -> ByteString) -> ByteString -> ByteString
bs_concatMap =  T.concatMap

bs_cons :: Word8 -> ByteString -> ByteString
bs_cons =  T.cons

bs_copy :: ByteString -> ByteString
bs_copy =  T.copy

bs_count :: Word8 -> ByteString -> Int
bs_count =  T.count

bs_drop :: Int -> ByteString -> ByteString
bs_drop =  T.drop

bs_dropWhile :: (Word8 -> Bool) -> ByteString -> ByteString
bs_dropWhile =  T.dropWhile

bs_elem :: Word8 -> ByteString -> Bool
bs_elem =  T.elem

bs_elemIndex :: Word8 -> ByteString -> Maybe Int
bs_elemIndex =  T.elemIndex

bs_elemIndexEnd :: Word8 -> ByteString -> Maybe Int
bs_elemIndexEnd =  T.elemIndexEnd

bs_elemIndices :: Word8 -> ByteString -> [Int]
bs_elemIndices =  T.elemIndices

bs_empty :: ByteString
bs_empty =  T.empty
-- (errorEmptyList) doesn't seem to be exported

bs_filter :: (Word8 -> Bool) -> ByteString -> ByteString
bs_filter =  T.filter

bs_find :: (Word8 -> Bool) -> ByteString -> Maybe Word8
bs_find =  T.find

bs_findIndex :: (Word8 -> Bool) -> ByteString -> Maybe Int
bs_findIndex =  T.findIndex

bs_findIndices :: (Word8 -> Bool) -> ByteString -> [Int]
bs_findIndices =  T.findIndices

bs_findSubstring :: ByteString -> ByteString -> Maybe Int
bs_findSubstring =  T.findSubstring

bs_findSubstrings :: ByteString -> ByteString -> [Int]
bs_findSubstrings =  T.findSubstrings

bs_foldl :: forall a. (a -> Word8 -> a) -> a -> ByteString -> a
bs_foldl =  T.foldl

bs_foldl' :: forall a. (a -> Word8 -> a) -> a -> ByteString -> a
bs_foldl' =  T.foldl'

bs_foldl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
bs_foldl1 =  T.foldl1

bs_foldl1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
bs_foldl1' =  T.foldl1'

bs_foldr :: forall a. (Word8 -> a -> a) -> a -> ByteString -> a
bs_foldr =  T.foldr

bs_foldr' :: forall a. (Word8 -> a -> a) -> a -> ByteString -> a
bs_foldr' =  T.foldr'

bs_foldr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
bs_foldr1 =  T.foldr1

bs_foldr1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
bs_foldr1' =  T.foldr1'

bs_getContents :: IO ByteString
bs_getContents =  T.getContents
-- (getContents1) doesn't seem to be exported
-- (getContents2) doesn't seem to be exported
-- (getContents3) doesn't seem to be exported
-- (getContents4) doesn't seem to be exported
-- (getContents5) doesn't seem to be exported

bs_getLine :: IO ByteString
bs_getLine =  T.getLine
-- (getLine1) doesn't seem to be exported
-- (getLine2) doesn't seem to be exported
-- (getLine3) doesn't seem to be exported

bs_group :: ByteString -> [ByteString]
bs_group =  T.group

bs_groupBy :: (Word8 -> Word8 -> Bool) -> ByteString -> [ByteString]
bs_groupBy =  T.groupBy

bs_hGet :: Handle -> Int -> IO ByteString
bs_hGet =  T.hGet
-- (hGet1) doesn't seem to be exported
-- (hGet2) doesn't seem to be exported

bs_hGetContents :: Handle -> IO ByteString
bs_hGetContents =  T.hGetContents

bs_hGetLine :: Handle -> IO ByteString
bs_hGetLine =  T.hGetLine
-- (hGetLine1) doesn't seem to be exported

bs_hGetNonBlocking :: Handle -> Int -> IO ByteString
bs_hGetNonBlocking =  T.hGetNonBlocking
-- (hGetNonBlocking1) doesn't seem to be exported
-- (hGetNonBlocking2) doesn't seem to be exported

bs_hGetSome :: Handle -> Int -> IO ByteString
bs_hGetSome =  T.hGetSome
-- (hGetSome1) doesn't seem to be exported
-- (hGetSome2) doesn't seem to be exported

bs_hPut :: Handle -> ByteString -> IO ()
bs_hPut =  T.hPut

bs_hPutNonBlocking :: Handle -> ByteString -> IO ByteString
bs_hPutNonBlocking =  T.hPutNonBlocking
-- (hPutNonBlocking1) doesn't seem to be exported

bs_hPutStr :: Handle -> ByteString -> IO ()
bs_hPutStr =  T.hPutStr

bs_hPutStrLn :: Handle -> ByteString -> IO ()
bs_hPutStrLn =  T.hPutStrLn
-- (hPutStrLn1) doesn't seem to be exported
-- (hPutStrLn2) doesn't seem to be exported
-- (hPutStrLn3) doesn't seem to be exported

bs_head :: ByteString -> Word8
bs_head =  T.head

bs_index :: ByteString -> Int -> Word8
bs_index =  T.index

bs_init :: ByteString -> ByteString
bs_init =  T.init

bs_inits :: ByteString -> [ByteString]
bs_inits =  T.inits

bs_interact :: (ByteString -> ByteString) -> IO ()
bs_interact =  T.interact
-- (interact1) doesn't seem to be exported

bs_intercalate :: ByteString -> [ByteString] -> ByteString
bs_intercalate =  T.intercalate
-- (intercalateWithByte) doesn't seem to be exported

bs_intersperse :: Word8 -> ByteString -> ByteString
bs_intersperse =  T.intersperse

bs_isInfixOf :: ByteString -> ByteString -> Bool
bs_isInfixOf =  T.isInfixOf

bs_isPrefixOf :: ByteString -> ByteString -> Bool
bs_isPrefixOf =  T.isPrefixOf

bs_isSuffixOf :: ByteString -> ByteString -> Bool
bs_isSuffixOf =  T.isSuffixOf

bs_last :: ByteString -> Word8
bs_last =  T.last

bs_length :: ByteString -> Int
bs_length =  T.length

bs_map :: (Word8 -> Word8) -> ByteString -> ByteString
bs_map =  T.map

bs_mapAccumL :: forall acc.
  (acc -> Word8 -> (acc, Word8))
  -> acc -> ByteString -> (acc, ByteString)
bs_mapAccumL =  T.mapAccumL

bs_mapAccumR :: forall acc.
  (acc -> Word8 -> (acc, Word8))
  -> acc -> ByteString -> (acc, ByteString)
bs_mapAccumR =  T.mapAccumR

bs_maximum :: ByteString -> Word8
bs_maximum =  T.maximum

bs_minimum :: ByteString -> Word8
bs_minimum =  T.minimum
-- (moduleError) doesn't seem to be exported
-- (moduleErrorIO) doesn't seem to be exported

bs_notElem :: Word8 -> ByteString -> Bool
bs_notElem =  T.notElem

bs_null :: ByteString -> Bool
bs_null =  T.null

bs_pack :: [Word8] -> ByteString
bs_pack =  T.pack

bs_packCString :: CString -> IO ByteString
bs_packCString =  T.packCString
-- (packCString1) doesn't seem to be exported
-- (packCString2) doesn't seem to be exported
-- (packCString3) doesn't seem to be exported

bs_packCStringLen :: CStringLen -> IO ByteString
bs_packCStringLen =  T.packCStringLen

bs_partition :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
bs_partition =  T.partition

bs_putStr :: ByteString -> IO ()
bs_putStr =  T.putStr
-- (putStr1) doesn't seem to be exported

bs_putStrLn :: ByteString -> IO ()
bs_putStrLn =  T.putStrLn
-- (putStrLn1) doesn't seem to be exported

bs_readFile :: FilePath -> IO ByteString
bs_readFile =  T.readFile
-- (readFile1) doesn't seem to be exported
-- (readFile2) doesn't seem to be exported
-- (readFile3) doesn't seem to be exported

bs_replicate :: Int -> Word8 -> ByteString
bs_replicate =  T.replicate

bs_reverse :: ByteString -> ByteString
bs_reverse =  T.reverse

bs_scanl :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteString
bs_scanl =  T.scanl

bs_scanl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteString
bs_scanl1 =  T.scanl1

bs_scanr :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteString
bs_scanr =  T.scanr

bs_scanr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> ByteString
bs_scanr1 =  T.scanr1

bs_singleton :: Word8 -> ByteString
bs_singleton =  T.singleton

bs_snoc :: ByteString -> Word8 -> ByteString
bs_snoc =  T.snoc

bs_sort :: ByteString -> ByteString
bs_sort =  T.sort

bs_span :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
bs_span =  T.span
-- (spanByte) doesn't seem to be exported

bs_spanEnd :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
bs_spanEnd =  T.spanEnd

bs_split :: Word8 -> ByteString -> [ByteString]
bs_split =  T.split

bs_splitAt :: Int -> ByteString -> (ByteString, ByteString)
bs_splitAt =  T.splitAt

bs_splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]
bs_splitWith =  T.splitWith

bs_tail :: ByteString -> ByteString
bs_tail =  T.tail

bs_tails :: ByteString -> [ByteString]
bs_tails =  T.tails

bs_take :: Int -> ByteString -> ByteString
bs_take =  T.take

bs_takeWhile :: (Word8 -> Bool) -> ByteString -> ByteString
bs_takeWhile =  T.takeWhile

bs_transpose :: [ByteString] -> [ByteString]
bs_transpose =  T.transpose

bs_uncons :: ByteString -> Maybe (Word8, ByteString)
bs_uncons =  T.uncons

bs_unfoldr :: forall a. (a -> Maybe (Word8, a)) -> a -> ByteString
bs_unfoldr =  T.unfoldr

bs_unfoldrN :: forall a.
  Int -> (a -> Maybe (Word8, a)) -> a -> (ByteString, Maybe a)
bs_unfoldrN =  T.unfoldrN

bs_unpack :: ByteString -> [Word8]
bs_unpack =  T.unpack
-- (unpackFoldr) doesn't seem to be exported

bs_unsnoc :: ByteString -> Maybe (ByteString, Word8)
bs_unsnoc =  T.unsnoc

bs_unzip :: [(Word8, Word8)] -> (ByteString, ByteString)
bs_unzip =  T.unzip

bs_useAsCString :: forall a. ByteString -> (CString -> IO a) -> IO a
bs_useAsCString =  T.useAsCString
-- (useAsCString1) doesn't seem to be exported

bs_useAsCStringLen :: forall a. ByteString -> (CStringLen -> IO a) -> IO a
bs_useAsCStringLen =  T.useAsCStringLen
-- (useAsCStringLen1) doesn't seem to be exported

bs_writeFile :: FilePath -> ByteString -> IO ()
bs_writeFile =  T.writeFile
-- (writeFile1) doesn't seem to be exported

bs_zip :: ByteString -> ByteString -> [(Word8, Word8)]
bs_zip =  T.zip

bs_zipWith :: forall a. (Word8 -> Word8 -> a) -> ByteString -> ByteString -> [a]
bs_zipWith =  T.zipWith
-- (zipWith') doesn't seem to be exported
-- (zipWith_$s$wzipWith) doesn't seem to be exported
-- (zip_$s$wzip) doesn't seem to be exported
