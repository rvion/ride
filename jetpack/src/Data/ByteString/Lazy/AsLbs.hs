 -- generated by rvion/jetpack-gen 
module AsLbs.hs where
import Data.ByteString.Lazy

-- ($wa) doesn't seem to be exported
-- ($wa1) doesn't seem to be exported
-- ($wa2) doesn't seem to be exported
-- ($wbreak) doesn't seem to be exported
-- ($wcount) doesn't seem to be exported
-- ($wdrop') doesn't seem to be exported
-- ($wfoldl1') doesn't seem to be exported
-- ($wgo) doesn't seem to be exported
-- ($wgo1) doesn't seem to be exported
-- ($windex') doesn't seem to be exported
-- ($wmapAccumL) doesn't seem to be exported
-- ($wmapAccumR) doesn't seem to be exported
-- ($wpartition) doesn't seem to be exported
-- ($wreplicate) doesn't seem to be exported
-- ($wsplitAt') doesn't seem to be exported
-- ($wtails) doesn't seem to be exported
-- ($wtake') doesn't seem to be exported
-- ($wto) doesn't seem to be exported

lbs_all :: (Word8 -> Bool) -> ByteString -> Bool
lbs_all =  T.all

lbs_any :: (Word8 -> Bool) -> ByteString -> Bool
lbs_any =  T.any

lbs_append :: ByteString -> ByteString -> ByteString
lbs_append =  T.append

lbs_appendFile :: FilePath -> ByteString -> IO ()
lbs_appendFile =  T.appendFile
-- (appendFile1) doesn't seem to be exported
-- (appendFile2) doesn't seem to be exported

lbs_break :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
lbs_break =  T.break
-- (break1) doesn't seem to be exported

lbs_concat :: [ByteString] -> ByteString
lbs_concat =  T.concat

lbs_concatMap :: (Word8 -> ByteString) -> ByteString -> ByteString
lbs_concatMap =  T.concatMap

lbs_cons :: Word8 -> ByteString -> ByteString
lbs_cons =  T.cons

lbs_cons' :: Word8 -> ByteString -> ByteString
lbs_cons' =  T.cons'

lbs_copy :: ByteString -> ByteString
lbs_copy =  T.copy
-- (copy_go1) doesn't seem to be exported

lbs_count :: Word8 -> ByteString -> Int64
lbs_count =  T.count

lbs_cycle :: ByteString -> ByteString
lbs_cycle =  T.cycle
-- (cycle1) doesn't seem to be exported

lbs_drop :: Int64 -> ByteString -> ByteString
lbs_drop =  T.drop

lbs_dropWhile :: (Word8 -> Bool) -> ByteString -> ByteString
lbs_dropWhile =  T.dropWhile
-- (drop_drop') doesn't seem to be exported

lbs_elem :: Word8 -> ByteString -> Bool
lbs_elem =  T.elem

lbs_elemIndex :: Word8 -> ByteString -> Maybe Int64
lbs_elemIndex =  T.elemIndex

lbs_elemIndexEnd :: Word8 -> ByteString -> Maybe Int64
lbs_elemIndexEnd =  T.elemIndexEnd

lbs_elemIndices :: Word8 -> ByteString -> [Int64]
lbs_elemIndices =  T.elemIndices

lbs_empty :: ByteString
lbs_empty =  T.empty
-- (errorEmptyList) doesn't seem to be exported

lbs_filter :: (Word8 -> Bool) -> ByteString -> ByteString
lbs_filter =  T.filter

lbs_find :: (Word8 -> Bool) -> ByteString -> Maybe Word8
lbs_find =  T.find

lbs_findIndex :: (Word8 -> Bool) -> ByteString -> Maybe Int64
lbs_findIndex =  T.findIndex

lbs_findIndices :: (Word8 -> Bool) -> ByteString -> [Int64]
lbs_findIndices =  T.findIndices

lbs_foldl :: forall a. (a -> Word8 -> a) -> a -> ByteString -> a
lbs_foldl =  T.foldl

lbs_foldl' :: forall a. (a -> Word8 -> a) -> a -> ByteString -> a
lbs_foldl' =  T.foldl'

lbs_foldl1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
lbs_foldl1 =  T.foldl1

lbs_foldl1' :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
lbs_foldl1' =  T.foldl1'
-- (foldl1'1) doesn't seem to be exported
-- (foldl2) doesn't seem to be exported

lbs_foldr :: forall a. (Word8 -> a -> a) -> a -> ByteString -> a
lbs_foldr =  T.foldr

lbs_foldr1 :: (Word8 -> Word8 -> Word8) -> ByteString -> Word8
lbs_foldr1 =  T.foldr1
-- (foldr2) doesn't seem to be exported
-- (foldr3) doesn't seem to be exported

lbs_fromChunks :: [ByteString] -> ByteString
lbs_fromChunks =  T.fromChunks
-- (fromChunks_go) doesn't seem to be exported

lbs_fromStrict :: ByteString -> ByteString
lbs_fromStrict =  T.fromStrict

lbs_getContents :: IO ByteString
lbs_getContents =  T.getContents
-- (getContents1) doesn't seem to be exported
-- (getContents2) doesn't seem to be exported

lbs_group :: ByteString -> [ByteString]
lbs_group =  T.group

lbs_groupBy :: (Word8 -> Word8 -> Bool) -> ByteString -> [ByteString]
lbs_groupBy =  T.groupBy
-- (group_$s$wto) doesn't seem to be exported
-- (group_$sgroup) doesn't seem to be exported

lbs_hGet :: Handle -> Int -> IO ByteString
lbs_hGet =  T.hGet
-- (hGet1) doesn't seem to be exported
-- (hGet2) doesn't seem to be exported

lbs_hGetContents :: Handle -> IO ByteString
lbs_hGetContents =  T.hGetContents

lbs_hGetNonBlocking :: Handle -> Int -> IO ByteString
lbs_hGetNonBlocking =  T.hGetNonBlocking
-- (hGetNonBlocking1) doesn't seem to be exported
-- (hGetNonBlocking2) doesn't seem to be exported

lbs_hPut :: Handle -> ByteString -> IO ()
lbs_hPut =  T.hPut

lbs_hPutNonBlocking :: Handle -> ByteString -> IO ByteString
lbs_hPutNonBlocking =  T.hPutNonBlocking
-- (hPutNonBlocking1) doesn't seem to be exported

lbs_hPutStr :: Handle -> ByteString -> IO ()
lbs_hPutStr =  T.hPutStr

lbs_head :: ByteString -> Word8
lbs_head =  T.head

lbs_index :: ByteString -> Int64 -> Word8
lbs_index =  T.index
-- (index1) doesn't seem to be exported

lbs_init :: ByteString -> ByteString
lbs_init =  T.init
-- (init1) doesn't seem to be exported
-- (init_go) doesn't seem to be exported

lbs_inits :: ByteString -> [ByteString]
lbs_inits =  T.inits
-- (inits_inits') doesn't seem to be exported

lbs_interact :: (ByteString -> ByteString) -> IO ()
lbs_interact =  T.interact
-- (interact1) doesn't seem to be exported

lbs_intercalate :: ByteString -> [ByteString] -> ByteString
lbs_intercalate =  T.intercalate

lbs_intersperse :: Word8 -> ByteString -> ByteString
lbs_intersperse =  T.intersperse

lbs_isPrefixOf :: ByteString -> ByteString -> Bool
lbs_isPrefixOf =  T.isPrefixOf
-- (isPrefixOf_$sisPrefixOf) doesn't seem to be exported
-- (isPrefixOf_$sisPrefixOf1) doesn't seem to be exported

lbs_isSuffixOf :: ByteString -> ByteString -> Bool
lbs_isSuffixOf =  T.isSuffixOf

lbs_iterate :: (Word8 -> Word8) -> Word8 -> ByteString
lbs_iterate =  T.iterate

lbs_last :: ByteString -> Word8
lbs_last =  T.last
-- (last1) doesn't seem to be exported
-- (last_$s$wgo) doesn't seem to be exported
-- (last_go) doesn't seem to be exported

lbs_length :: ByteString -> Int64
lbs_length =  T.length

lbs_map :: (Word8 -> Word8) -> ByteString -> ByteString
lbs_map =  T.map

lbs_mapAccumL :: forall acc.
  (acc -> Word8 -> (acc, Word8))
  -> acc -> ByteString -> (acc, ByteString)
lbs_mapAccumL =  T.mapAccumL

lbs_mapAccumR :: forall acc.
  (acc -> Word8 -> (acc, Word8))
  -> acc -> ByteString -> (acc, ByteString)
lbs_mapAccumR =  T.mapAccumR

lbs_maximum :: ByteString -> Word8
lbs_maximum =  T.maximum

lbs_minimum :: ByteString -> Word8
lbs_minimum =  T.minimum

lbs_notElem :: Word8 -> ByteString -> Bool
lbs_notElem =  T.notElem

lbs_null :: ByteString -> Bool
lbs_null =  T.null

lbs_pack :: [Word8] -> ByteString
lbs_pack =  T.pack

lbs_partition :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
lbs_partition =  T.partition

lbs_putStr :: ByteString -> IO ()
lbs_putStr =  T.putStr
-- (putStr1) doesn't seem to be exported

lbs_putStrLn :: ByteString -> IO ()
lbs_putStrLn =  T.putStrLn
-- (putStrLn1) doesn't seem to be exported
-- (putStrLn2) doesn't seem to be exported
-- (putStrLn3) doesn't seem to be exported
-- (putStrLn4) doesn't seem to be exported

lbs_readFile :: FilePath -> IO ByteString
lbs_readFile =  T.readFile
-- (readFile1) doesn't seem to be exported

lbs_repeat :: Word8 -> ByteString
lbs_repeat =  T.repeat

lbs_replicate :: Int64 -> Word8 -> ByteString
lbs_replicate =  T.replicate
-- (revChunks) doesn't seem to be exported

lbs_reverse :: ByteString -> ByteString
lbs_reverse =  T.reverse

lbs_scanl :: (Word8 -> Word8 -> Word8) -> Word8 -> ByteString -> ByteString
lbs_scanl =  T.scanl

lbs_singleton :: Word8 -> ByteString
lbs_singleton =  T.singleton

lbs_snoc :: ByteString -> Word8 -> ByteString
lbs_snoc =  T.snoc

lbs_span :: (Word8 -> Bool) -> ByteString -> (ByteString, ByteString)
lbs_span =  T.span

lbs_split :: Word8 -> ByteString -> [ByteString]
lbs_split =  T.split

lbs_splitAt :: Int64 -> ByteString -> (ByteString, ByteString)
lbs_splitAt =  T.splitAt
-- (splitAt_splitAt') doesn't seem to be exported

lbs_splitWith :: (Word8 -> Bool) -> ByteString -> [ByteString]
lbs_splitWith =  T.splitWith
-- (split_$sgo) doesn't seem to be exported
-- (split_go) doesn't seem to be exported

lbs_tail :: ByteString -> ByteString
lbs_tail =  T.tail

lbs_tails :: ByteString -> [ByteString]
lbs_tails =  T.tails
-- (tails_$s$wtails) doesn't seem to be exported

lbs_take :: Int64 -> ByteString -> ByteString
lbs_take =  T.take

lbs_takeWhile :: (Word8 -> Bool) -> ByteString -> ByteString
lbs_takeWhile =  T.takeWhile
-- (take_take') doesn't seem to be exported

lbs_toChunks :: ByteString -> [ByteString]
lbs_toChunks =  T.toChunks
-- (toChunks_$sgo1) doesn't seem to be exported
-- (toChunks_go1) doesn't seem to be exported

lbs_toStrict :: ByteString -> ByteString
lbs_toStrict =  T.toStrict
-- (toStrict1) doesn't seem to be exported
-- (toStrict_$s$wa) doesn't seem to be exported

lbs_transpose :: [ByteString] -> [ByteString]
lbs_transpose =  T.transpose
-- (transpose1) doesn't seem to be exported

lbs_uncons :: ByteString -> Maybe (Word8, ByteString)
lbs_uncons =  T.uncons

lbs_unfoldr :: forall a. (a -> Maybe (Word8, a)) -> a -> ByteString
lbs_unfoldr =  T.unfoldr
-- (unfoldr1) doesn't seem to be exported

lbs_unpack :: ByteString -> [Word8]
lbs_unpack =  T.unpack

lbs_unsnoc :: ByteString -> Maybe (ByteString, Word8)
lbs_unsnoc =  T.unsnoc

lbs_unzip :: [(Word8, Word8)] -> (ByteString, ByteString)
lbs_unzip =  T.unzip

lbs_writeFile :: FilePath -> ByteString -> IO ()
lbs_writeFile =  T.writeFile
-- (writeFile1) doesn't seem to be exported

lbs_zip :: ByteString -> ByteString -> [(Word8, Word8)]
lbs_zip =  T.zip

lbs_zipWith :: forall a. (Word8 -> Word8 -> a) -> ByteString -> ByteString -> [a]
lbs_zipWith =  T.zipWith
