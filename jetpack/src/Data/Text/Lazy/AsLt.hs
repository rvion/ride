 -- generated by rvion/jetpack-gen 
module AsLt.hs where
import Data.Text.Lazy

-- ($crnf) doesn't seem to be exported
-- ($fBinaryText) doesn't seem to be exported
-- ($fBinaryText1) doesn't seem to be exported
-- ($fBinaryText2) doesn't seem to be exported
-- ($fBinaryText_$cget) doesn't seem to be exported
-- ($fBinaryText_$cput) doesn't seem to be exported
-- ($fDataText) doesn't seem to be exported
-- ($fDataText1) doesn't seem to be exported
-- ($fDataText2) doesn't seem to be exported
-- ($fDataText3) doesn't seem to be exported
-- ($fDataText4) doesn't seem to be exported
-- ($fDataText5) doesn't seem to be exported
-- ($fDataText6) doesn't seem to be exported
-- ($fDataText7) doesn't seem to be exported
-- ($fDataText8) doesn't seem to be exported
-- ($fDataText_$cdataTypeOf) doesn't seem to be exported
-- ($fDataText_$cgfoldl) doesn't seem to be exported
-- ($fDataText_$cgmapM) doesn't seem to be exported
-- ($fDataText_$cgmapMo) doesn't seem to be exported
-- ($fDataText_$cgmapMp) doesn't seem to be exported
-- ($fDataText_$cgmapQ) doesn't seem to be exported
-- ($fDataText_$cgmapQi) doesn't seem to be exported
-- ($fDataText_$cgmapQl) doesn't seem to be exported
-- ($fDataText_$cgmapQr) doesn't seem to be exported
-- ($fDataText_$cgmapT) doesn't seem to be exported
-- ($fDataText_$cgunfold) doesn't seem to be exported
-- ($fDataText_$ctoConstr) doesn't seem to be exported
-- ($fDataText_$s$dmdataCast1) doesn't seem to be exported
-- ($fDataText_$s$dmdataCast2) doesn't seem to be exported
-- ($fDataText_outer) doesn't seem to be exported
-- ($fDataText_wild) doesn't seem to be exported
-- ($fDataText_ww1) doesn't seem to be exported
-- ($fDataText_ww3) doesn't seem to be exported
-- ($fDataText_ww4) doesn't seem to be exported
-- ($fEqText) doesn't seem to be exported
-- ($fEqText_$c/=) doesn't seem to be exported
-- ($fIsListText) doesn't seem to be exported
-- ($fIsListText_$s$dmfromListN) doesn't seem to be exported
-- ($fIsStringText) doesn't seem to be exported
-- ($fMonoidText) doesn't seem to be exported
-- ($fNFDataText) doesn't seem to be exported
-- ($fOrdText) doesn't seem to be exported
-- ($fOrdText_$cmax) doesn't seem to be exported
-- ($fOrdText_$cmin) doesn't seem to be exported
-- ($fOrdText_$s$dm<) doesn't seem to be exported
-- ($fOrdText_$s$dm<=) doesn't seem to be exported
-- ($fOrdText_$s$dm>) doesn't seem to be exported
-- ($fOrdText_$s$dm>=) doesn't seem to be exported
-- ($fOrdText_$scompareText) doesn't seem to be exported
-- ($fOrdText_$scompareText1) doesn't seem to be exported
-- ($fReadText) doesn't seem to be exported
-- ($fReadText1) doesn't seem to be exported
-- ($fReadText2) doesn't seem to be exported
-- ($fReadText3) doesn't seem to be exported
-- ($fReadText4) doesn't seem to be exported
-- ($fReadText_$creadList) doesn't seem to be exported
-- ($fReadText_$creadListPrec) doesn't seem to be exported
-- ($fReadText_$creadPrec) doesn't seem to be exported
-- ($fReadText_$creadsPrec) doesn't seem to be exported
-- ($fReadText_go) doesn't seem to be exported
-- ($fShowText) doesn't seem to be exported
-- ($fShowText1) doesn't seem to be exported
-- ($fShowText_$cshow) doesn't seem to be exported
-- ($fShowText_$cshowList) doesn't seem to be exported
-- ($fShowText_$cshowsPrec) doesn't seem to be exported
-- ($w$cgunfold) doesn't seem to be exported
-- ($w$creadsPrec) doesn't seem to be exported
-- ($wa) doesn't seem to be exported
-- ($wbreak) doesn't seem to be exported
-- ($wcountChar) doesn't seem to be exported
-- ($wdrop') doesn't seem to be exported
-- ($wdropEnd) doesn't seem to be exported
-- ($wgo) doesn't seem to be exported
-- ($wgo1) doesn't seem to be exported
-- ($wgo2) doesn't seem to be exported
-- ($witerate) doesn't seem to be exported
-- ($wscanr) doesn't seem to be exported
-- ($wsplitAt) doesn't seem to be exported
-- ($wtakeEnd) doesn't seem to be exported
-- ($wunfold) doesn't seem to be exported
-- ($wunfold1) doesn't seem to be exported
-- ($wunfold2) doesn't seem to be exported
-- ($wunfold3) doesn't seem to be exported
-- (TFCo:R:ItemText) doesn't seem to be exported

lt_all :: (Char -> Bool) -> Text -> Bool
lt_all =  T.all

lt_any :: (Char -> Bool) -> Text -> Bool
lt_any =  T.any

lt_append :: Text -> Text -> Text
lt_append =  T.append

lt_break :: (Char -> Bool) -> Text -> (Text, Text)
lt_break =  T.break

lt_breakOn :: Text -> Text -> (Text, Text)
lt_breakOn =  T.breakOn
-- (breakOn1) doesn't seem to be exported

lt_breakOnAll :: Text -> Text -> [(Text, Text)]
lt_breakOnAll =  T.breakOnAll
-- (breakOnAll1) doesn't seem to be exported

lt_breakOnEnd :: Text -> Text -> (Text, Text)
lt_breakOnEnd =  T.breakOnEnd
-- (breakOn_$s$wsplitAtWord) doesn't seem to be exported

lt_center :: Int64 -> Char -> Text -> Text
lt_center =  T.center

lt_chunksOf :: Int64 -> Text -> [Text]
lt_chunksOf =  T.chunksOf

lt_commonPrefixes :: Text -> Text -> Maybe (Text, Text, Text)
lt_commonPrefixes =  T.commonPrefixes
-- (commonPrefixes_$s$wgo) doesn't seem to be exported
-- (commonPrefixes_$s$wgo1) doesn't seem to be exported
-- (commonPrefixes_go) doesn't seem to be exported

lt_compareLength :: Text -> Int64 -> Ordering
lt_compareLength =  T.compareLength
-- (compareText) doesn't seem to be exported

lt_concat :: [Text] -> Text
lt_concat =  T.concat

lt_concatMap :: (Char -> Text) -> Text -> Text
lt_concatMap =  T.concatMap

lt_cons :: Char -> Text -> Text
lt_cons =  T.cons

lt_count :: Text -> Text -> Int64
lt_count =  T.count
-- (count1) doesn't seem to be exported
-- (countChar) doesn't seem to be exported

lt_cycle :: Text -> Text
lt_cycle =  T.cycle
-- (cycle1) doesn't seem to be exported

lt_drop :: Int64 -> Text -> Text
lt_drop =  T.drop

lt_dropAround :: (Char -> Bool) -> Text -> Text
lt_dropAround =  T.dropAround

lt_dropEnd :: Int64 -> Text -> Text
lt_dropEnd =  T.dropEnd
-- (dropEnd_$sdropChunk) doesn't seem to be exported
-- (dropEnd_go) doesn't seem to be exported

lt_dropWhile :: (Char -> Bool) -> Text -> Text
lt_dropWhile =  T.dropWhile

lt_dropWhileEnd :: (Char -> Bool) -> Text -> Text
lt_dropWhileEnd =  T.dropWhileEnd
-- (equal) doesn't seem to be exported

lt_filter :: (Char -> Bool) -> Text -> Text
lt_filter =  T.filter

lt_find :: (Char -> Bool) -> Text -> Maybe Char
lt_find =  T.find

lt_foldl :: forall a. (a -> Char -> a) -> a -> Text -> a
lt_foldl =  T.foldl

lt_foldl' :: forall a. (a -> Char -> a) -> a -> Text -> a
lt_foldl' =  T.foldl'

lt_foldl1 :: (Char -> Char -> Char) -> Text -> Char
lt_foldl1 =  T.foldl1

lt_foldl1' :: (Char -> Char -> Char) -> Text -> Char
lt_foldl1' =  T.foldl1'

lt_foldr :: forall a. (Char -> a -> a) -> a -> Text -> a
lt_foldr =  T.foldr

lt_foldr1 :: (Char -> Char -> Char) -> Text -> Char
lt_foldr1 =  T.foldr1

lt_fromChunks :: [Text] -> Text
lt_fromChunks =  T.fromChunks
-- (fromChunks_go) doesn't seem to be exported

lt_fromStrict :: Text -> Text
lt_fromStrict =  T.fromStrict

lt_group :: Text -> [Text]
lt_group =  T.group

lt_groupBy :: (Char -> Char -> Bool) -> Text -> [Text]
lt_groupBy =  T.groupBy

lt_head :: Text -> Char
lt_head =  T.head
-- (impossibleError) doesn't seem to be exported

lt_index :: Text -> Int64 -> Char
lt_index =  T.index

lt_init :: Text -> Text
lt_init =  T.init

lt_inits :: Text -> [Text]
lt_inits =  T.inits
-- (inits_inits') doesn't seem to be exported

lt_intercalate :: Text -> [Text] -> Text
lt_intercalate =  T.intercalate

lt_intersperse :: Char -> Text -> Text
lt_intersperse =  T.intersperse

lt_isInfixOf :: Text -> Text -> Bool
lt_isInfixOf =  T.isInfixOf

lt_isPrefixOf :: Text -> Text -> Bool
lt_isPrefixOf =  T.isPrefixOf
-- (isPrefixOf_$sisPrefixOf) doesn't seem to be exported
-- (isPrefixOf_$sisPrefixOf1) doesn't seem to be exported

lt_isSuffixOf :: Text -> Text -> Bool
lt_isSuffixOf =  T.isSuffixOf

lt_iterate :: (Char -> Char) -> Char -> Text
lt_iterate =  T.iterate

lt_justifyLeft :: Int64 -> Char -> Text -> Text
lt_justifyLeft =  T.justifyLeft

lt_justifyRight :: Int64 -> Char -> Text -> Text
lt_justifyRight =  T.justifyRight

lt_last :: Text -> Char
lt_last =  T.last

lt_length :: Text -> Int64
lt_length =  T.length

lt_lines :: Text -> [Text]
lt_lines =  T.lines

lt_map :: (Char -> Char) -> Text -> Text
lt_map =  T.map

lt_mapAccumL :: forall a. (a -> Char -> (a, Char)) -> a -> Text -> (a, Text)
lt_mapAccumL =  T.mapAccumL

lt_mapAccumR :: forall a. (a -> Char -> (a, Char)) -> a -> Text -> (a, Text)
lt_mapAccumR =  T.mapAccumR

lt_maximum :: Text -> Char
lt_maximum =  T.maximum

lt_minimum :: Text -> Char
lt_minimum =  T.minimum

lt_null :: Text -> Bool
lt_null =  T.null

lt_pack :: String -> Text
lt_pack =  T.pack
-- (packConstr) doesn't seem to be exported

lt_partition :: (Char -> Bool) -> Text -> (Text, Text)
lt_partition =  T.partition

lt_repeat :: Char -> Text
lt_repeat =  T.repeat

lt_replace :: Text -> Text -> Text -> Text
lt_replace =  T.replace

lt_replicate :: Int64 -> Text -> Text
lt_replicate =  T.replicate
-- (replicateChar) doesn't seem to be exported
-- (revChunks) doesn't seem to be exported

lt_reverse :: Text -> Text
lt_reverse =  T.reverse
-- (reverse_rev) doesn't seem to be exported

lt_scanl :: (Char -> Char -> Char) -> Char -> Text -> Text
lt_scanl =  T.scanl

lt_scanl1 :: (Char -> Char -> Char) -> Text -> Text
lt_scanl1 =  T.scanl1

lt_scanr :: (Char -> Char -> Char) -> Char -> Text -> Text
lt_scanr =  T.scanr

lt_scanr1 :: (Char -> Char -> Char) -> Text -> Text
lt_scanr1 =  T.scanr1
-- (scanr1_$s$wgo) doesn't seem to be exported

lt_singleton :: Char -> Text
lt_singleton =  T.singleton

lt_snoc :: Text -> Char -> Text
lt_snoc =  T.snoc

lt_span :: (Char -> Bool) -> Text -> (Text, Text)
lt_span =  T.span

lt_split :: (Char -> Bool) -> Text -> [Text]
lt_split =  T.split

lt_splitAt :: Int64 -> Text -> (Text, Text)
lt_splitAt =  T.splitAt
-- (splitAtWord) doesn't seem to be exported
-- (splitAt_$s$wsplitAt) doesn't seem to be exported

lt_splitOn :: Text -> Text -> [Text]
lt_splitOn =  T.splitOn
-- (splitOn1) doesn't seem to be exported
-- (splitOn2) doesn't seem to be exported
-- (splitOn3) doesn't seem to be exported
-- (splitOn_drop') doesn't seem to be exported

lt_strip :: Text -> Text
lt_strip =  T.strip

lt_stripEnd :: Text -> Text
lt_stripEnd =  T.stripEnd

lt_stripPrefix :: Text -> Text -> Maybe Text
lt_stripPrefix =  T.stripPrefix

lt_stripStart :: Text -> Text
lt_stripStart =  T.stripStart

lt_stripSuffix :: Text -> Text -> Maybe Text
lt_stripSuffix =  T.stripSuffix

lt_tail :: Text -> Text
lt_tail =  T.tail

lt_tails :: Text -> [Text]
lt_tails =  T.tails
-- (tails_$stails) doesn't seem to be exported

lt_take :: Int64 -> Text -> Text
lt_take =  T.take

lt_takeEnd :: Int64 -> Text -> Text
lt_takeEnd =  T.takeEnd
-- (takeEnd_$stakeChunk) doesn't seem to be exported

lt_takeWhile :: (Char -> Bool) -> Text -> Text
lt_takeWhile =  T.takeWhile
-- (textDataType) doesn't seem to be exported

lt_toCaseFold :: Text -> Text
lt_toCaseFold =  T.toCaseFold

lt_toChunks :: Text -> [Text]
lt_toChunks =  T.toChunks

lt_toLower :: Text -> Text
lt_toLower =  T.toLower

lt_toStrict :: Text -> Text
lt_toStrict =  T.toStrict

lt_toTitle :: Text -> Text
lt_toTitle =  T.toTitle

lt_toUpper :: Text -> Text
lt_toUpper =  T.toUpper

lt_transpose :: [Text] -> [Text]
lt_transpose =  T.transpose
-- (transpose1) doesn't seem to be exported
-- (transpose2) doesn't seem to be exported
-- (transpose3) doesn't seem to be exported

lt_uncons :: Text -> Maybe (Char, Text)
lt_uncons =  T.uncons

lt_unfoldr :: forall a. (a -> Maybe (Char, a)) -> a -> Text
lt_unfoldr =  T.unfoldr

lt_unfoldrN :: forall a. Int64 -> (a -> Maybe (Char, a)) -> a -> Text
lt_unfoldrN =  T.unfoldrN

lt_unlines :: [Text] -> Text
lt_unlines =  T.unlines

lt_unpack :: Text -> String
lt_unpack =  T.unpack
-- (unpackCString#) doesn't seem to be exported

lt_unwords :: [Text] -> Text
lt_unwords =  T.unwords

lt_words :: Text -> [Text]
lt_words =  T.words

lt_zip :: Text -> Text -> [(Char, Char)]
lt_zip =  T.zip

lt_zipWith :: (Char -> Char -> Char) -> Text -> Text -> Text
lt_zipWith =  T.zipWith
