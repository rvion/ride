module Data.Aeson.AsJson where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import Data.Aeson as I

-- json_decode :: forall a. FromJSON a => ByteString -> Maybe a
json_decode = I.decode

-- json_decode' :: forall a. FromJSON a => ByteString -> Maybe a
json_decode' = I.decode'

-- json_decodeStrict :: forall a. FromJSON a => ByteString -> Maybe a
json_decodeStrict = I.decodeStrict

-- json_decodeStrict' :: forall a. FromJSON a => ByteString -> Maybe a
json_decodeStrict' = I.decodeStrict'

-- json_eitherDecode :: forall a. FromJSON a => ByteString -> Either String a
json_eitherDecode = I.eitherDecode

-- json_eitherDecode' :: forall a. FromJSON a => ByteString -> Either String a
json_eitherDecode' = I.eitherDecode'

-- json_eitherDecodeStrict :: forall a. FromJSON a => ByteString -> Either String a
json_eitherDecodeStrict = I.eitherDecodeStrict

-- json_eitherDecodeStrict' :: forall a. FromJSON a => ByteString -> Either String a
json_eitherDecodeStrict' = I.eitherDecodeStrict'

-- json_encode :: forall a. ToJSON a => a -> ByteString
json_encode = I.encode

-- json_json :: Parser Value
json_json = I.json

-- json_json' :: Parser Value
json_json' = I.json'

-- json_genericParseJSON :: forall a. (Generic a, GFromJSON (Rep a)) => Options -> Value -> Parser a
json_genericParseJSON = I.genericParseJSON

-- json_genericToJSON :: forall a. (Generic a, GToJSON (Rep a)) => Options -> a -> Value
json_genericToJSON = I.genericToJSON

-- (.!=) :: forall a. Parser (Maybe a) -> a -> Parser a
(.!=) = (I..!=)

-- (.:) :: forall a. FromJSON a => Object -> Text -> Parser a
(.:) = (I..:)

-- (.:?) :: forall a. FromJSON a => Object -> Text -> Parser (Maybe a)
(.:?) = (I..:?)

-- (.=) :: forall a. ToJSON a => Text -> a -> Pair
(.=) = (I..=)

-- json_fromJSON :: forall a. FromJSON a => Value -> Result a
json_fromJSON = I.fromJSON

-- json_withArray :: forall a. String -> (Array -> Parser a) -> Value -> Parser a
json_withArray = I.withArray

-- json_withBool :: forall a. String -> (Bool -> Parser a) -> Value -> Parser a
json_withBool = I.withBool

-- json_withObject :: forall a. String -> (Object -> Parser a) -> Value -> Parser a
json_withObject = I.withObject

-- json_withScientific :: forall a. String -> (Scientific -> Parser a) -> Value -> Parser a
json_withScientific = I.withScientific

-- json_withText :: forall a. String -> (Text -> Parser a) -> Value -> Parser a
json_withText = I.withText

-- json_object :: [Pair] -> Value
json_object = I.object

type JsonArray  = I.Array
type JsonDotNetTime  = I.DotNetTime
type JsonObject  = I.Object
type JsonResult a = I.Result a
type JsonValue  = I.Value
