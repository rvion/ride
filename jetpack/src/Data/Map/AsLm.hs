module Data.Map.AsLm where
-- generated by rvion/jetpack-gen 

import Data.Map as I

lm_fold = I.fold
lm_foldWithKey = I.foldWithKey
lm_insertLookupWithKey' = I.insertLookupWithKey'
lm_insertWith' = I.insertWith'
lm_insertWithKey' = I.insertWithKey'
(!) = (I.!)
(\\) = (I.\\)
lm_adjust = I.adjust
lm_adjustWithKey = I.adjustWithKey
lm_alter = I.alter
lm_assocs = I.assocs
lm_delete = I.delete
lm_deleteAt = I.deleteAt
lm_deleteFindMax = I.deleteFindMax
lm_deleteFindMin = I.deleteFindMin
lm_deleteMax = I.deleteMax
lm_deleteMin = I.deleteMin
lm_difference = I.difference
lm_differenceWith = I.differenceWith
lm_differenceWithKey = I.differenceWithKey
lm_elemAt = I.elemAt
lm_elems = I.elems
lm_empty = I.empty
lm_filter = I.filter
lm_filterWithKey = I.filterWithKey
lm_findIndex = I.findIndex
lm_findMax = I.findMax
lm_findMin = I.findMin
lm_findWithDefault = I.findWithDefault
lm_foldMapWithKey = I.foldMapWithKey
lm_foldl = I.foldl
lm_foldl' = I.foldl'
lm_foldlWithKey = I.foldlWithKey
lm_foldlWithKey' = I.foldlWithKey'
lm_foldr = I.foldr
lm_foldr' = I.foldr'
lm_foldrWithKey = I.foldrWithKey
lm_foldrWithKey' = I.foldrWithKey'
lm_fromAscList = I.fromAscList
lm_fromAscListWith = I.fromAscListWith
lm_fromAscListWithKey = I.fromAscListWithKey
lm_fromDistinctAscList = I.fromDistinctAscList
lm_fromList = I.fromList
lm_fromListWith = I.fromListWith
lm_fromListWithKey = I.fromListWithKey
lm_fromSet = I.fromSet
lm_insert = I.insert
lm_insertLookupWithKey = I.insertLookupWithKey
lm_insertWith = I.insertWith
lm_insertWithKey = I.insertWithKey
lm_intersection = I.intersection
lm_intersectionWith = I.intersectionWith
lm_intersectionWithKey = I.intersectionWithKey
lm_isProperSubmapOf = I.isProperSubmapOf
lm_isProperSubmapOfBy = I.isProperSubmapOfBy
lm_isSubmapOf = I.isSubmapOf
lm_isSubmapOfBy = I.isSubmapOfBy
lm_keys = I.keys
lm_keysSet = I.keysSet
lm_lookup = I.lookup
lm_lookupGE = I.lookupGE
lm_lookupGT = I.lookupGT
lm_lookupIndex = I.lookupIndex
lm_lookupLE = I.lookupLE
lm_lookupLT = I.lookupLT
lm_map = I.map
lm_mapAccum = I.mapAccum
lm_mapAccumRWithKey = I.mapAccumRWithKey
lm_mapAccumWithKey = I.mapAccumWithKey
lm_mapEither = I.mapEither
lm_mapEitherWithKey = I.mapEitherWithKey
lm_mapKeys = I.mapKeys
lm_mapKeysMonotonic = I.mapKeysMonotonic
lm_mapKeysWith = I.mapKeysWith
lm_mapMaybe = I.mapMaybe
lm_mapMaybeWithKey = I.mapMaybeWithKey
lm_mapWithKey = I.mapWithKey
lm_maxView = I.maxView
lm_maxViewWithKey = I.maxViewWithKey
lm_member = I.member
lm_mergeWithKey = I.mergeWithKey
lm_minView = I.minView
lm_minViewWithKey = I.minViewWithKey
lm_notMember = I.notMember
lm_null = I.null
lm_partition = I.partition
lm_partitionWithKey = I.partitionWithKey
lm_showTree = I.showTree
lm_showTreeWith = I.showTreeWith
lm_singleton = I.singleton
lm_size = I.size
lm_split = I.split
lm_splitLookup = I.splitLookup
lm_splitRoot = I.splitRoot
lm_toAscList = I.toAscList
lm_toDescList = I.toDescList
lm_toList = I.toList
lm_traverseWithKey = I.traverseWithKey
lm_union = I.union
lm_unionWith = I.unionWith
lm_unionWithKey = I.unionWithKey
lm_unions = I.unions
lm_unionsWith = I.unionsWith
lm_update = I.update
lm_updateAt = I.updateAt
lm_updateLookupWithKey = I.updateLookupWithKey
lm_updateMax = I.updateMax
lm_updateMaxWithKey = I.updateMaxWithKey
lm_updateMin = I.updateMin
lm_updateMinWithKey = I.updateMinWithKey
lm_updateWithKey = I.updateWithKey
lm_valid = I.valid
type LmMap a b = I.Map a b
