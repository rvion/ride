

module Data.Conduit.AsC where
-- generated by rvion/jetpack-gen 

import Data.Conduit as I

c_connect = I.connect
c_fuse = I.fuse
($$) = (I.$$)
($$+) = (I.$$+)
($$++) = (I.$$++)
($$+-) = (I.$$+-)
($=) = (I.$=)
($=+) = (I.$=+)
(=$) = (I.=$)
(=$$+) = (I.=$$+)
(=$$++) = (I.=$$++)
(=$$+-) = (I.=$$+-)
(=$=) = (I.=$=)
c_addCleanup = I.addCleanup
c_await = I.await
c_awaitForever = I.awaitForever
c_bracketP = I.bracketP
c_catchC = I.catchC
c_closeResumableSource = I.closeResumableSource
c_fuseBoth = I.fuseBoth
c_fuseBothMaybe = I.fuseBothMaybe
c_fuseLeftovers = I.fuseLeftovers
c_fuseReturnLeftovers = I.fuseReturnLeftovers
c_fuseUpstream = I.fuseUpstream
c_handleC = I.handleC
c_leftover = I.leftover
c_mapInput = I.mapInput
c_mapOutput = I.mapOutput
c_mapOutputMaybe = I.mapOutputMaybe
c_newResumableConduit = I.newResumableConduit
c_newResumableSource = I.newResumableSource
c_passthroughSink = I.passthroughSink
c_runConduit = I.runConduit
c_sequenceConduits = I.sequenceConduits
c_sequenceSinks = I.sequenceSinks
c_sequenceSources = I.sequenceSources
c_toConsumer = I.toConsumer
c_toProducer = I.toProducer
c_transPipe = I.transPipe
c_tryC = I.tryC
c_unwrapResumable = I.unwrapResumable
c_unwrapResumableConduit = I.unwrapResumableConduit
c_yield = I.yield
c_yieldOr = I.yieldOr
