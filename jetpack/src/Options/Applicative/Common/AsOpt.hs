module Options.Applicative.Common.AsOpt where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Options.Applicative.Common as I

-- opt_evalParser :: forall a. Parser a -> Maybe a
opt_evalParser = I.evalParser

-- opt_liftOpt :: forall a. Option a -> Parser a
opt_liftOpt = I.liftOpt

-- opt_mapParser :: forall a b. (forall x. OptHelpInfo -> Option x -> b) -> Parser a -> [b]
opt_mapParser = I.mapParser

-- opt_optionNames :: forall a. OptReader a -> [OptName]
opt_optionNames = I.optionNames

-- opt_runParser :: forall a (m :: * -> *). MonadP m => ArgPolicy -> Parser a -> Args -> m (a, Args)
opt_runParser = I.runParser

-- opt_runParserFully :: forall a (m :: * -> *). MonadP m => ArgPolicy -> Parser a -> Args -> m a
opt_runParserFully = I.runParserFully

-- opt_runParserInfo :: forall a (m :: * -> *). MonadP m => ParserInfo a -> Args -> m a
opt_runParserInfo = I.runParserInfo

-- opt_showOption :: OptName -> String
opt_showOption = I.showOption

-- opt_treeMapParser :: forall a b. (forall x. OptHelpInfo -> Option x -> b) -> Parser a -> OptTree b
opt_treeMapParser = I.treeMapParser

type OptParser a = I.Parser a
type OptParserInfo a = I.ParserInfo a
-- opt_infoFailureCode :: forall a. ParserInfo a -> Int
opt_infoFailureCode = I.infoFailureCode

-- opt_infoFooter :: forall a. ParserInfo a -> Chunk Doc
opt_infoFooter = I.infoFooter

-- opt_infoFullDesc :: forall a. ParserInfo a -> Bool
opt_infoFullDesc = I.infoFullDesc

-- opt_infoHeader :: forall a. ParserInfo a -> Chunk Doc
opt_infoHeader = I.infoHeader

-- opt_infoIntersperse :: forall a. ParserInfo a -> Bool
opt_infoIntersperse = I.infoIntersperse

-- opt_infoParser :: forall a. ParserInfo a -> Parser a
opt_infoParser = I.infoParser

-- opt_infoProgDesc :: forall a. ParserInfo a -> Chunk Doc
opt_infoProgDesc = I.infoProgDesc

type OptParserPrefs  = I.ParserPrefs
-- opt_prefBacktrack :: ParserPrefs -> Bool
opt_prefBacktrack = I.prefBacktrack

-- opt_prefColumns :: ParserPrefs -> Int
opt_prefColumns = I.prefColumns

-- opt_prefDisambiguate :: ParserPrefs -> Bool
opt_prefDisambiguate = I.prefDisambiguate

-- opt_prefMultiSuffix :: ParserPrefs -> String
opt_prefMultiSuffix = I.prefMultiSuffix

-- opt_prefShowHelpOnError :: ParserPrefs -> Bool
opt_prefShowHelpOnError = I.prefShowHelpOnError

