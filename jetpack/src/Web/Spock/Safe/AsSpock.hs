module Web.Spock.Safe.AsSpock where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Web.Spock.Safe as I

-- spock_defaultCookieSettings :: CookieSettings
spock_defaultCookieSettings = I.defaultCookieSettings

-- spock_body :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m ByteString
spock_body = I.body

-- spock_bytes :: forall ctx (m :: * -> *) a. MonadIO m => ByteString -> ActionCtxT ctx m a
spock_bytes = I.bytes

-- spock_cookie :: forall ctx (m :: * -> *). MonadIO m => Text -> ActionCtxT ctx m (Maybe Text)
spock_cookie = I.cookie

-- spock_deleteCookie :: forall ctx (m :: * -> *). MonadIO m => Text -> ActionCtxT ctx m ()
spock_deleteCookie = I.deleteCookie

-- spock_file :: forall ctx (m :: * -> *) a. MonadIO m => Text -> FilePath -> ActionCtxT ctx m a
spock_file = I.file

-- spock_files :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m (HashMap Text UploadedFile)
spock_files = I.files

-- spock_getContext :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m ctx
spock_getContext = I.getContext

-- spock_header :: forall ctx (m :: * -> *). MonadIO m => Text -> ActionCtxT ctx m (Maybe Text)
spock_header = I.header

-- spock_html :: forall ctx (m :: * -> *) a. MonadIO m => Text -> ActionCtxT ctx m a
spock_html = I.html

-- spock_json :: forall a ctx (m :: * -> *) b. (ToJSON a, MonadIO m) => a -> ActionCtxT ctx m b
spock_json = I.json

-- spock_jsonBody :: forall ctx (m :: * -> *) a. (MonadIO m, FromJSON a) => ActionCtxT ctx m (Maybe a)
spock_jsonBody = I.jsonBody

-- spock_jsonBody' :: forall ctx (m :: * -> *) a. (MonadIO m, FromJSON a) => ActionCtxT ctx m a
spock_jsonBody' = I.jsonBody'

-- spock_jumpNext :: forall ctx (m :: * -> *) a. MonadIO m => ActionCtxT ctx m a
spock_jumpNext = I.jumpNext

-- spock_lazyBytes :: forall ctx (m :: * -> *) a. MonadIO m => ByteString -> ActionCtxT ctx m a
spock_lazyBytes = I.lazyBytes

-- spock_middlewarePass :: forall ctx (m :: * -> *) a. MonadIO m => ActionCtxT ctx m a
spock_middlewarePass = I.middlewarePass

-- spock_modifyVault :: forall ctx (m :: * -> *). MonadIO m => (Vault -> Vault) -> ActionCtxT ctx m ()
spock_modifyVault = I.modifyVault

-- spock_param :: forall ctx (m :: * -> *) p. (PathPiece p, MonadIO m) => Text -> ActionCtxT ctx m (Maybe p)
spock_param = I.param

-- spock_param' :: forall ctx (m :: * -> *) p. (PathPiece p, MonadIO m) => Text -> ActionCtxT ctx m p
spock_param' = I.param'

-- spock_params :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m [(Text, Text)]
spock_params = I.params

-- spock_preferredFormat :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m ClientPreferredFormat
spock_preferredFormat = I.preferredFormat

-- spock_queryVault :: forall a ctx (m :: * -> *). MonadIO m => Key a -> ActionCtxT ctx m (Maybe a)
spock_queryVault = I.queryVault

-- spock_rawHeader :: forall ctx (m :: * -> *). MonadIO m => HeaderName -> ActionCtxT ctx m (Maybe ByteString)
spock_rawHeader = I.rawHeader

-- spock_redirect :: forall ctx (m :: * -> *) a. MonadIO m => Text -> ActionCtxT ctx m a
spock_redirect = I.redirect

-- spock_reqMethod :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m StdMethod
spock_reqMethod = I.reqMethod

-- spock_request :: forall ctx (m :: * -> *). MonadIO m => ActionCtxT ctx m Request
spock_request = I.request

-- spock_requireBasicAuth :: forall ctx (m :: * -> *) b a. MonadIO m => Text -> (Text -> Text -> ActionCtxT ctx m b) -> (b -> ActionCtxT ctx m a) -> ActionCtxT ctx m a
spock_requireBasicAuth = I.requireBasicAuth

-- spock_response :: forall ctx (m :: * -> *) a. MonadIO m => (Status -> ResponseHeaders -> Response) -> ActionCtxT ctx m a
spock_response = I.response

-- spock_runInContext :: forall ctx' (m :: * -> *) a ctx. MonadIO m => ctx' -> ActionCtxT ctx' m a -> ActionCtxT ctx m a
spock_runInContext = I.runInContext

-- spock_setCookie :: forall ctx (m :: * -> *). MonadIO m => Text -> Text -> CookieSettings -> ActionCtxT ctx m ()
spock_setCookie = I.setCookie

-- spock_setHeader :: forall ctx (m :: * -> *). MonadIO m => Text -> Text -> ActionCtxT ctx m ()
spock_setHeader = I.setHeader

-- spock_setStatus :: forall ctx (m :: * -> *). MonadIO m => Status -> ActionCtxT ctx m ()
spock_setStatus = I.setStatus

-- spock_stream :: forall ctx (m :: * -> *) a. MonadIO m => StreamingBody -> ActionCtxT ctx m a
spock_stream = I.stream

-- spock_text :: forall ctx (m :: * -> *) a. MonadIO m => Text -> ActionCtxT ctx m a
spock_text = I.text

-- spock_withBasicAuthData :: forall ctx (m :: * -> *) a. MonadIO m => (Maybe (Text, Text) -> ActionCtxT ctx m a) -> ActionCtxT ctx m a
spock_withBasicAuthData = I.withBasicAuthData

-- spock_getSpockHeart :: forall (t :: (* -> *) -> * -> *) conn sess st. MonadTrans t => t (WebStateM conn sess st) (WebState conn sess st)
spock_getSpockHeart = I.getSpockHeart

-- spock_runSpockIO :: forall conn sess st a. WebState conn sess st -> WebStateM conn sess st a -> IO a
spock_runSpockIO = I.runSpockIO

-- spock_defaultSessionCfg :: forall a. a -> SessionCfg a
spock_defaultSessionCfg = I.defaultSessionCfg

-- spock_defaultSessionHooks :: forall a. SessionHooks a
spock_defaultSessionHooks = I.defaultSessionHooks

-- spock_defaultSpockCfg :: forall sess conn st. sess -> PoolOrConn conn -> st -> SpockCfg conn sess st
spock_defaultSpockCfg = I.defaultSpockCfg

-- (<//>) :: forall (as :: [*]) (bs :: [*]). Path as -> Path bs -> Path (Append as bs)
(<//>) = (I.<//>)

-- spock_delete :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_delete = I.delete

-- spock_get :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_get = I.get

-- spock_getpost :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_getpost = I.getpost

-- spock_head :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_head = I.head

-- spock_hookAny :: forall ctx (m :: * -> *). Monad m => StdMethod -> ([Text] -> ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_hookAny = I.hookAny

-- spock_hookRoute :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, Monad m) => StdMethod -> Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_hookRoute = I.hookRoute

-- spock_middleware :: forall ctx (m :: * -> *). Monad m => Middleware -> SpockCtxT ctx m ()
spock_middleware = I.middleware

-- spock_patch :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_patch = I.patch

-- spock_post :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_post = I.post

-- spock_prehook :: forall (m :: * -> *) ctx ctx'. MonadIO m => ActionCtxT ctx m ctx' -> SpockCtxT ctx' m () -> SpockCtxT ctx m ()
spock_prehook = I.prehook

-- spock_put :: forall (xs :: [*]) ctx (m :: * -> *). (HasRep xs, MonadIO m) => Path xs -> HVectElim xs (ActionCtxT ctx m ()) -> SpockCtxT ctx m ()
spock_put = I.put

-- spock_renderRoute :: forall (as :: [*]). Path as -> HVectElim as Text
spock_renderRoute = I.renderRoute

-- spock_safeActionPath :: forall conn sess st a. (SafeAction conn sess st a, HasSpock (SpockAction conn sess st),  SpockConn (SpockAction conn sess st) ~ conn,  SpockSession (SpockAction conn sess st) ~ sess,  SpockState (SpockAction conn sess st) ~ st) => a -> SpockAction conn sess st Text
spock_safeActionPath = I.safeActionPath

-- spock_spock :: forall conn sess st. SpockCfg conn sess st -> SpockM conn sess st () -> IO Middleware
spock_spock = I.spock

-- spock_spockLimT :: forall (m :: * -> *). MonadIO m => Maybe Word64 -> (forall a. m a -> IO a) -> SpockT m () -> IO Middleware
spock_spockLimT = I.spockLimT

-- spock_spockT :: forall (m :: * -> *). MonadIO m => (forall a. m a -> IO a) -> SpockT m () -> IO Middleware
spock_spockT = I.spockT

-- spock_subcomponent :: forall ctx (m :: * -> *). Monad m => Path '[] -> SpockCtxT ctx m () -> SpockCtxT ctx m ()
spock_subcomponent = I.subcomponent

-- spock_clearAllSessions :: forall ctx conn sess st. SpockActionCtx ctx conn sess st ()
spock_clearAllSessions = I.clearAllSessions

-- spock_getSessionId :: forall ctx conn sess st. SpockActionCtx ctx conn sess st SessionId
spock_getSessionId = I.getSessionId

-- spock_mapAllSessions :: forall sess ctx conn st. (sess -> STM sess) -> SpockActionCtx ctx conn sess st ()
spock_mapAllSessions = I.mapAllSessions

-- spock_modifyReadSession :: forall sess ctx conn st. (sess -> sess) -> SpockActionCtx ctx conn sess st sess
spock_modifyReadSession = I.modifyReadSession

-- spock_modifySession :: forall sess ctx conn st. (sess -> sess) -> SpockActionCtx ctx conn sess st ()
spock_modifySession = I.modifySession

-- spock_modifySession' :: forall sess a ctx conn st. (sess -> (sess, a)) -> SpockActionCtx ctx conn sess st a
spock_modifySession' = I.modifySession'

-- spock_readSession :: forall ctx conn sess st. SpockActionCtx ctx conn sess st sess
spock_readSession = I.readSession

-- spock_readShowSessionPersist :: forall a. (Read a, Show a) => FilePath -> SessionPersistCfg a
spock_readShowSessionPersist = I.readShowSessionPersist

-- spock_runSpock :: Port -> IO Middleware -> IO ()
spock_runSpock = I.runSpock

-- spock_runSpockNoBanner :: Port -> IO Middleware -> IO ()
spock_runSpockNoBanner = I.runSpockNoBanner

-- spock_sessionRegenerateId :: forall ctx conn sess st. SpockActionCtx ctx conn sess st ()
spock_sessionRegenerateId = I.sessionRegenerateId

-- spock_spockAsApp :: IO Middleware -> IO Application
spock_spockAsApp = I.spockAsApp

-- spock_writeSession :: forall sess ctx conn st. sess -> SpockActionCtx ctx conn sess st ()
spock_writeSession = I.writeSession

-- spock_root :: Path '[]
spock_root = I.root

-- spock_static :: String -> Path '[]
spock_static = I.static

-- spock_var :: forall a. (Typeable a, PathPiece a) => Path '[a]
spock_var = I.var

type SpockCookieEOL  = I.CookieEOL
type SpockCookieSettings  = I.CookieSettings
-- spock_cs_EOL :: CookieSettings -> CookieEOL
spock_cs_EOL = I.cs_EOL

-- spock_cs_HTTPOnly :: CookieSettings -> Bool
spock_cs_HTTPOnly = I.cs_HTTPOnly

-- spock_cs_domain :: CookieSettings -> Maybe ByteString
spock_cs_domain = I.cs_domain

-- spock_cs_path :: CookieSettings -> Maybe ByteString
spock_cs_path = I.cs_path

-- spock_cs_secure :: CookieSettings -> Bool
spock_cs_secure = I.cs_secure

type SpockConnBuilder a = I.ConnBuilder a
-- spock_cb_createConn :: forall a. ConnBuilder a -> IO a
spock_cb_createConn = I.cb_createConn

-- spock_cb_destroyConn :: forall a. ConnBuilder a -> a -> IO ()
spock_cb_destroyConn = I.cb_destroyConn

-- spock_cb_poolConfiguration :: forall a. ConnBuilder a -> PoolCfg
spock_cb_poolConfiguration = I.cb_poolConfiguration

-- spock_runQuery :: forall a. (SpockConn m -> IO a) -> m a
spock_runQuery = I.runQuery

-- spock_getState :: m (SpockState m)
spock_getState = I.getState

-- spock_getSessMgr :: m (SessionManager (SpockConn m) (SpockSession m) (SpockState m))
-- spock_getSessMgr = I.getSessMgr

type SpockPoolCfg  = I.PoolCfg
-- spock_pc_keepOpenTime :: PoolCfg -> NominalDiffTime
spock_pc_keepOpenTime = I.pc_keepOpenTime

-- spock_pc_resPerStripe :: PoolCfg -> Int
spock_pc_resPerStripe = I.pc_resPerStripe

-- spock_pc_stripes :: PoolCfg -> Int
spock_pc_stripes = I.pc_stripes

type SpockPoolOrConn a = I.PoolOrConn a
-- spock_runSafeAction :: a -> SpockAction conn sess st ()
spock_runSafeAction = I.runSafeAction

type SpockSessionCfg a = I.SessionCfg a
-- spock_sc_cookieName :: forall a. SessionCfg a -> Text
spock_sc_cookieName = I.sc_cookieName

-- spock_sc_emptySession :: forall a. SessionCfg a -> a
spock_sc_emptySession = I.sc_emptySession

-- spock_sc_hooks :: forall a. SessionCfg a -> SessionHooks a
spock_sc_hooks = I.sc_hooks

-- spock_sc_housekeepingInterval :: forall a. SessionCfg a -> NominalDiffTime
spock_sc_housekeepingInterval = I.sc_housekeepingInterval

-- spock_sc_persistCfg :: forall a. SessionCfg a -> Maybe (SessionPersistCfg a)
spock_sc_persistCfg = I.sc_persistCfg

-- spock_sc_sessionExpandTTL :: forall a. SessionCfg a -> Bool
spock_sc_sessionExpandTTL = I.sc_sessionExpandTTL

-- spock_sc_sessionIdEntropy :: forall a. SessionCfg a -> Int
spock_sc_sessionIdEntropy = I.sc_sessionIdEntropy

-- spock_sc_sessionTTL :: forall a. SessionCfg a -> NominalDiffTime
spock_sc_sessionTTL = I.sc_sessionTTL

type SpockSessionHooks a = I.SessionHooks a
-- spock_sh_removed :: forall a. SessionHooks a -> HashMap SessionId a -> IO ()
spock_sh_removed = I.sh_removed

type SpockSessionId  = I.SessionId
type SpockSessionPersistCfg a = I.SessionPersistCfg a
-- spock_spc_load :: forall a. SessionPersistCfg a -> IO [(SessionId, UTCTime, a)]
spock_spc_load = I.spc_load

-- spock_spc_store :: forall a. SessionPersistCfg a -> [(SessionId, UTCTime, a)] -> IO ()
spock_spc_store = I.spc_store

type SpockSpockAction a b c = I.SpockAction a b c
type SpockSpockActionCtx a b c d = I.SpockActionCtx a b c d
type SpockSpockCfg a b c = I.SpockCfg a b c
-- spock_spc_database :: forall conn sess st. SpockCfg conn sess st -> PoolOrConn conn
spock_spc_database = I.spc_database

-- spock_spc_initialState :: forall conn sess st. SpockCfg conn sess st -> st
spock_spc_initialState = I.spc_initialState

-- spock_spc_maxRequestSize :: forall conn sess st. SpockCfg conn sess st -> Maybe Word64
spock_spc_maxRequestSize = I.spc_maxRequestSize

-- spock_spc_sessionCfg :: forall conn sess st. SpockCfg conn sess st -> SessionCfg sess
spock_spc_sessionCfg = I.spc_sessionCfg

type SpockWebState a b c = I.WebState a b c
type SpockWebStateM a b c = I.WebStateM a b c
type SpockClientPreferredFormat  = I.ClientPreferredFormat
type SpockActionCtxT a b c = I.ActionCtxT a b c
type SpockActionT  = I.ActionT
type SpockUploadedFile  = I.UploadedFile
-- spock_uf_contentType :: UploadedFile -> Text
spock_uf_contentType = I.uf_contentType

-- spock_uf_name :: UploadedFile -> Text
spock_uf_name = I.uf_name

-- spock_uf_tempLocation :: UploadedFile -> FilePath
spock_uf_tempLocation = I.uf_tempLocation

type SpockSpockCtxM a b c d = I.SpockCtxM a b c d
type SpockSpockCtxT a b c = I.SpockCtxT a b c
type SpockSpockM a b c = I.SpockM a b c
type SpockSpockT  = I.SpockT
type SpockStdMethod  = I.StdMethod
type SpockPath a = I.Path a
type SpockVar a = I.Var a
