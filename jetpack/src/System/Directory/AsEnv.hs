module System.Directory.AsEnv
  ( module System.Directory.AsEnv
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified System.Directory as I


-- env_canonicalizePath :: FilePath -> IO FilePath
env_canonicalizePath = I.canonicalizePath

-- env_copyFile :: FilePath -> FilePath -> IO ()
env_copyFile = I.copyFile

-- env_copyPermissions :: FilePath -> FilePath -> IO ()
env_copyPermissions = I.copyPermissions

-- env_createDirectory :: FilePath -> IO ()
env_createDirectory = I.createDirectory

-- env_createDirectoryIfMissing :: Bool -> FilePath -> IO ()
env_createDirectoryIfMissing = I.createDirectoryIfMissing

-- env_doesDirectoryExist :: FilePath -> IO Bool
env_doesDirectoryExist = I.doesDirectoryExist

-- env_doesFileExist :: FilePath -> IO Bool
env_doesFileExist = I.doesFileExist

-- env_emptyPermissions :: Permissions
env_emptyPermissions = I.emptyPermissions

-- env_findExecutable :: String -> IO (Maybe FilePath)
env_findExecutable = I.findExecutable

-- env_findExecutables :: String -> IO [FilePath]
env_findExecutables = I.findExecutables

-- env_findFile :: [FilePath] -> String -> IO (Maybe FilePath)
env_findFile = I.findFile

-- env_findFiles :: [FilePath] -> String -> IO [FilePath]
env_findFiles = I.findFiles

-- env_findFilesWith :: (FilePath -> IO Bool) -> [FilePath] -> String -> IO [FilePath]
env_findFilesWith = I.findFilesWith

-- env_getAppUserDataDirectory :: String -> IO FilePath
env_getAppUserDataDirectory = I.getAppUserDataDirectory

-- env_getCurrentDirectory :: IO FilePath
env_getCurrentDirectory = I.getCurrentDirectory

-- env_getDirectoryContents :: FilePath -> IO [FilePath]
env_getDirectoryContents = I.getDirectoryContents

-- env_getHomeDirectory :: IO FilePath
env_getHomeDirectory = I.getHomeDirectory

-- env_getModificationTime :: FilePath -> IO UTCTime
env_getModificationTime = I.getModificationTime

-- env_getPermissions :: FilePath -> IO Permissions
env_getPermissions = I.getPermissions

-- env_getTemporaryDirectory :: IO FilePath
env_getTemporaryDirectory = I.getTemporaryDirectory

-- env_getUserDocumentsDirectory :: IO FilePath
env_getUserDocumentsDirectory = I.getUserDocumentsDirectory

-- env_makeAbsolute :: FilePath -> IO FilePath
env_makeAbsolute = I.makeAbsolute

-- env_makeRelativeToCurrentDirectory :: FilePath -> IO FilePath
env_makeRelativeToCurrentDirectory = I.makeRelativeToCurrentDirectory

-- env_removeDirectory :: FilePath -> IO ()
env_removeDirectory = I.removeDirectory

-- env_removeDirectoryRecursive :: FilePath -> IO ()
env_removeDirectoryRecursive = I.removeDirectoryRecursive

-- env_removeFile :: FilePath -> IO ()
env_removeFile = I.removeFile

-- env_renameDirectory :: FilePath -> FilePath -> IO ()
env_renameDirectory = I.renameDirectory

-- env_renameFile :: FilePath -> FilePath -> IO ()
env_renameFile = I.renameFile

-- env_setCurrentDirectory :: FilePath -> IO ()
env_setCurrentDirectory = I.setCurrentDirectory

-- env_setOwnerExecutable :: Bool -> Permissions -> Permissions
env_setOwnerExecutable = I.setOwnerExecutable

-- env_setOwnerReadable :: Bool -> Permissions -> Permissions
env_setOwnerReadable = I.setOwnerReadable

-- env_setOwnerSearchable :: Bool -> Permissions -> Permissions
env_setOwnerSearchable = I.setOwnerSearchable

-- env_setOwnerWritable :: Bool -> Permissions -> Permissions
env_setOwnerWritable = I.setOwnerWritable

-- env_setPermissions :: FilePath -> Permissions -> IO ()
env_setPermissions = I.setPermissions

type EnvPermissions  = I.Permissions
get_env_readable o = I.readable o
set_env_readable x o = o { I.readable = x}
get_env_writable o = I.writable o
set_env_writable x o = o { I.writable = x}
get_env_executable o = I.executable o
set_env_executable x o = o { I.executable = x}
get_env_searchable o = I.searchable o
set_env_searchable x o = o { I.searchable = x}
