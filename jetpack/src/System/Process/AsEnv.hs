module System.Process.AsEnv
  ( module System.Process.AsEnv
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified System.Process as I


-- env_callCommand :: String -> IO ()
env_callCommand = I.callCommand

-- env_callProcess :: FilePath -> [String] -> IO ()
env_callProcess = I.callProcess

-- env_createPipe :: IO (Handle, Handle)
env_createPipe = I.createPipe

-- env_createProcess :: CreateProcess -> IO (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)
env_createProcess = I.createProcess

-- env_getProcessExitCode :: ProcessHandle -> IO (Maybe ExitCode)
env_getProcessExitCode = I.getProcessExitCode

-- env_interruptProcessGroupOf :: ProcessHandle -> IO ()
env_interruptProcessGroupOf = I.interruptProcessGroupOf

-- env_proc :: FilePath -> [String] -> CreateProcess
env_proc = I.proc

-- env_rawSystem :: String -> [String] -> IO ExitCode
env_rawSystem = I.rawSystem

-- env_readCreateProcess :: CreateProcess -> String -> IO String
env_readCreateProcess = I.readCreateProcess

-- env_readCreateProcessWithExitCode :: CreateProcess -> String -> IO (ExitCode, String, String)
env_readCreateProcessWithExitCode = I.readCreateProcessWithExitCode

-- env_readProcess :: FilePath -> [String] -> String -> IO String
env_readProcess = I.readProcess

-- env_readProcessWithExitCode :: FilePath -> [String] -> String -> IO (ExitCode, String, String)
env_readProcessWithExitCode = I.readProcessWithExitCode

-- env_runCommand :: String -> IO ProcessHandle
env_runCommand = I.runCommand

-- env_runInteractiveCommand :: String -> IO (Handle, Handle, Handle, ProcessHandle)
env_runInteractiveCommand = I.runInteractiveCommand

-- env_runInteractiveProcess :: FilePath -> [String] -> Maybe FilePath -> Maybe [(String, String)] -> IO (Handle, Handle, Handle, ProcessHandle)
env_runInteractiveProcess = I.runInteractiveProcess

-- env_runProcess :: FilePath -> [String] -> Maybe FilePath -> Maybe [(String, String)] -> Maybe Handle -> Maybe Handle -> Maybe Handle -> IO ProcessHandle
env_runProcess = I.runProcess

-- env_shell :: String -> CreateProcess
env_shell = I.shell

-- env_showCommandForUser :: FilePath -> [String] -> String
env_showCommandForUser = I.showCommandForUser

-- env_spawnCommand :: String -> IO ProcessHandle
env_spawnCommand = I.spawnCommand

-- env_spawnProcess :: FilePath -> [String] -> IO ProcessHandle
env_spawnProcess = I.spawnProcess

-- env_system :: String -> IO ExitCode
env_system = I.system

-- env_terminateProcess :: ProcessHandle -> IO ()
env_terminateProcess = I.terminateProcess

-- env_waitForProcess :: ProcessHandle -> IO ExitCode
env_waitForProcess = I.waitForProcess

-- env_createProcess_ :: String -> CreateProcess -> IO (Maybe Handle, Maybe Handle, Maybe Handle, ProcessHandle)
env_createProcess_ = I.createProcess_

type EnvCmdSpec  = I.CmdSpec

-- constructor :: String -> ShellCommand
env_mk'ShellCommand =  I.ShellCommand
pattern EnvShellCommand a <-  I.ShellCommand a

-- constructor :: FilePath -> [String] -> RawCommand
env_mk'RawCommand =  I.RawCommand
pattern EnvRawCommand a b <-  I.RawCommand a b

type EnvCreateProcess  = I.CreateProcess
get_env_cmdspec o = I.cmdspec o
set_env_cmdspec x o = o { I.cmdspec = x}
get_env_cwd o = I.cwd o
set_env_cwd x o = o { I.cwd = x}
get_env_env o = I.env o
set_env_env x o = o { I.env = x}
get_env_std_in o = I.std_in o
set_env_std_in x o = o { I.std_in = x}
get_env_std_out o = I.std_out o
set_env_std_out x o = o { I.std_out = x}
get_env_std_err o = I.std_err o
set_env_std_err x o = o { I.std_err = x}
get_env_close_fds o = I.close_fds o
set_env_close_fds x o = o { I.close_fds = x}
get_env_create_group o = I.create_group o
set_env_create_group x o = o { I.create_group = x}
get_env_delegate_ctlc o = I.delegate_ctlc o
set_env_delegate_ctlc x o = o { I.delegate_ctlc = x}

-- constructor :: CmdSpec -> Maybe FilePath -> Maybe [(String, String)] -> StdStream -> StdStream -> StdStream -> Bool -> Bool -> Bool -> CreateProcess
env_mk'CreateProcess =  I.CreateProcess
pattern EnvCreateProcess a b c d e f g h i <-  I.CreateProcess a b c d e f g h i

type EnvProcessHandle  = I.ProcessHandle

type EnvStdStream  = I.StdStream

-- constructor :: Inherit
env_mk'Inherit =  I.Inherit
pattern EnvInherit  <-  I.Inherit

-- constructor :: Handle -> UseHandle
env_mk'UseHandle =  I.UseHandle
pattern EnvUseHandle a <-  I.UseHandle a

-- constructor :: CreatePipe
env_mk'CreatePipe =  I.CreatePipe
pattern EnvCreatePipe  <-  I.CreatePipe
