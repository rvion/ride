module Codec.Archive.Tar.Check.AsTar
  ( module Codec.Archive.Tar.Check.AsTar
  ) where
-- generated by https://github.com/rvion/ride/tree/master/jetpack-gen

import qualified Codec.Archive.Tar.Check as I


-- tar_checkPortability :: forall e. Entries e -> Entries (Either e PortabilityError)
tar_checkPortability = I.checkPortability

-- tar_checkSecurity :: forall e. Entries e -> Entries (Either e FileNameError)
tar_checkSecurity = I.checkSecurity

-- tar_checkTarbomb :: forall e. FilePath -> Entries e -> Entries (Either e TarBombError)
tar_checkTarbomb = I.checkTarbomb

type TarFileNameError  = I.FileNameError

-- constructor :: FilePath -> InvalidFileName
tar_mk'InvalidFileName =  I.InvalidFileName
pattern TarInvalidFileName a <-  I.InvalidFileName a

-- constructor :: FilePath -> AbsoluteFileName
tar_mk'AbsoluteFileName =  I.AbsoluteFileName
pattern TarAbsoluteFileName a <-  I.AbsoluteFileName a

type TarPortabilityError  = I.PortabilityError

-- constructor :: Format -> NonPortableFormat
tar_mk'NonPortableFormat =  I.NonPortableFormat
pattern TarNonPortableFormat a <-  I.NonPortableFormat a

-- constructor :: NonPortableFileType
tar_mk'NonPortableFileType =  I.NonPortableFileType
pattern TarNonPortableFileType  <-  I.NonPortableFileType

-- constructor :: FilePath -> NonPortableEntryNameChar
tar_mk'NonPortableEntryNameChar =  I.NonPortableEntryNameChar
pattern TarNonPortableEntryNameChar a <-  I.NonPortableEntryNameChar a

-- constructor :: PortabilityPlatform -> FileNameError -> NonPortableFileName
tar_mk'NonPortableFileName =  I.NonPortableFileName
pattern TarNonPortableFileName a b <-  I.NonPortableFileName a b

type TarPortabilityPlatform  = I.PortabilityPlatform

type TarTarBombError  = I.TarBombError

-- constructor :: FilePath -> TarBombError
tar_mk'TarBombError =  I.TarBombError
pattern TarTarBombError a <-  I.TarBombError a
